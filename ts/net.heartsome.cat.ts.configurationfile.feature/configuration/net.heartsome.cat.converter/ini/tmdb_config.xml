<?xml version="1.0" encoding="UTF-8"?>
<dbtypes>
	<!--
		HSQL
	-->
		<dbtype name="Internal DB" filebased="No" port="9001">
		<driver>org.hsqldb.jdbcDriver</driver>
		<url>jdbc:hsqldb:file:database/__DATABASE_NAME__</url>
		<config-property>
			<property name="user">sa</property>
			<property name="password"></property>
		</config-property>
		<create-hssysdb/>
		<create-hssystables>
			<step>CREATE CACHED TABLE HSDB7LIST (
				DBNAME VARCHAR(150) NOT NULL,
				QUALITY CHAR(1) NOT NULL,
				PRIMARY KEY (DBNAME)
				)</step>
		</create-hssystables>
		<insert-db>INSERT INTO HSDB7LIST (DBNAME,QUALITY) VALUES (?,?)</insert-db>
		<remove-db>DELETE FROM HSDB7LIST WHERE DBNAME=?</remove-db>
		<get-dblist>SELECT DBNAME, QUALITY FROM HSDB7LIST</get-dblist>
		<create-database/>
		<create-tables>
			<step>CREATE CACHED TABLE TU (
				TUID VARCHAR(30) NOT NULL,
				CREATIONID VARCHAR(30),
				CREATIONDATE DATETIME,
				CHANGEID VARCHAR(30),
				CHANGEDATE DATETIME,
				CREATIONTOOL VARCHAR(200),
				CREATIONTOOLVERSION VARCHAR(200),
				PRIMARY KEY (TUID) )</step>
			<step>CREATE CACHED TABLE TUV (
				TUID VARCHAR(30) NOT NULL,
				LANG VARCHAR(6) NOT NULL,
				SEG VARCHAR NOT NULL,
				PURETEXT VARCHAR NOT NULL,
				CLIENTID VARCHAR,
				CREATIONID VARCHAR(30),
				CREATIONDATE DATETIME,
				CHANGEID VARCHAR(30),
				CHANGEDATE DATETIME,
				CREATIONTOOL VARCHAR(200),
				CREATIONTOOLVERSION VARCHAR(200),
				HASH INTEGER NOT NULL,
				TUVTEXT VARCHAR NOT NULL,
				PREVIOUSHASH VARCHAR,
				NEXTHASH VARCHAR,
				PROJECTREF VARCHAR(256),
				JOBREF VARCHAR(256),
				PRIMARY KEY (TUID,LANG),
				FOREIGN KEY (TUID) REFERENCES TU )</step>
			<step>CREATE INDEX I_TUV_LANG ON TUV(LANG)</step>
			<step>CREATE INDEX I_TUV_HASH ON TUV(HASH)</step>
			<step>CREATE CACHED TABLE TU_NOTE (
				TUID VARCHAR(30) NOT NULL,
				NOTEID VARCHAR(30) NOT NULL,
				CONTENT VARCHAR,
				PRIMARY KEY (TUID, NOTEID) )</step>
			<step>CREATE CACHED TABLE TU_PROP (
				TUID VARCHAR(30) NOT NULL,
				PROPTYPE VARCHAR(255),
				CONTENT VARCHAR,
				PRIMARY KEY (TUID, PROPTYPE) )</step>
			<step>CREATE TABLE LANGS (
			    LANG VARCHAR(6) NOT NULL )</step>
		</create-tables>
		<drop-database/>
		<drop-tables>
			<drop-table>DROP TABLE TU_PROP</drop-table>
			<drop-table>DROP TABLE TU_NOTE</drop-table>
			<drop-table>DROP TABLE TUV</drop-table>
			<drop-table>DROP TABLE TU</drop-table>
	    </drop-tables>
		<readLanguages>SELECT * FROM LANGS</readLanguages>
		<createMatrix>CREATE TABLE MATRIX___LANG__ (
			TUID VARCHAR(30) NOT NULL,
			NGRAM INTEGER NOT NULL,
			SEGSIZE INTEGER,
			PRIMARY KEY (TUID,NGRAM) )</createMatrix>
		<createIndex4Matrix>
			<step>CREATE INDEX I_MATRIX___LANG___SEGSIZE ON MATRIX___LANG__(SEGSIZE)</step>
		</createIndex4Matrix>
		<addLanguage>INSERT INTO LANGS VALUES (?)</addLanguage>
		<insertMATRIX>INSERT INTO MATRIX___LANG__ (TUID, NGRAM, SEGSIZE) VALUES (?,?,?)</insertMATRIX>
		<searchMATRIX>SELECT TUID FROM MATRIX___LANG__ WHERE NGRAM IN (__SET__) AND SEGSIZE &gt;=? AND SEGSIZE&lt;=?</searchMATRIX>
		<searchTranslation>SELECT TUID FROM TUV WHERE PURETEXT=? AND LANG=?</searchTranslation>
		<freeSearch>SELECT TUID,NGRAM FROM MATRIX___LANG__ WHERE NGRAM IN (__SET__)</freeSearch>
		<retrieveTUV>SELECT TUID, LANG, SEG, PURETEXT, CREATIONID, CREATIONDATE, CHANGEDATE, CREATIONTOOL, CREATIONTOOLVERSION, TUVTEXT FROM TUV WHERE TUID=? AND LANG=?</retrieveTUV>
		<retrieveTUV_SEG>SELECT TUID, SEG FROM TUV WHERE HASH=? AND LANG=?</retrieveTUV_SEG>
		<retrieveTUV_SEG_CONTEXT>SELECT TUID, SEG FROM TUV WHERE HASH=? AND LANG=? AND PREVIOUSHASH=? AND NEXTHASH=?</retrieveTUV_SEG_CONTEXT>
		<removeMATRIX>DELETE FROM MATRIX___LANG__ WHERE TUID=?</removeMATRIX>
		<insertTU>INSERT INTO TU (TUID, CREATIONID, CREATIONDATE, CHANGEID, CHANGEDATE, CREATIONTOOL, CREATIONTOOLVERSION) VALUES (?,?,?,?,?,?,?)</insertTU>
		<updateTU>UPDATE TU SET CREATIONID=?,CREATIONDATE=?,CHANGEID=?,CHANGEDATE=?,CREATIONTOOL=?,CREATIONTOOLVERSION=? WHERE TUID=?</updateTU>
		<retrieveTU>SELECT TUID, CREATIONID, CREATIONDATE, CHANGEDATE, CREATIONTOOL, CREATIONTOOLVERSION FROM TU WHERE TUID=?</retrieveTU>
		<insertTUV>INSERT INTO TUV (TUID, LANG, SEG, PURETEXT, CLIENTID, CREATIONID, CREATIONDATE, CHANGEID, CHANGEDATE, CREATIONTOOL, CREATIONTOOLVERSION, HASH, TUVTEXT, PREVIOUSHASH, NEXTHASH, PROJECTREF, JOBREF) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)</insertTUV>
		<removeTUV>DELETE FROM TUV WHERE TUID=? AND LANG=?</removeTUV>
		<removeTU>DELETE FROM TU WHERE TUID=?</removeTU>
		<removeTU_PROP>DELETE FROM TU_PROP WHERE TUID=?</removeTU_PROP>
		<removeOneTU_PROP>DELETE FROM TU_PROP WHERE TUID=? AND PROPTYPE=? AND CONTENT=?</removeOneTU_PROP>
		<removeTU_NOTE>DELETE FROM TU_NOTE WHERE TUID=?</removeTU_NOTE>
		<insertTU_NOTE>INSERT INTO TU_NOTE (TUID, NOTEID, CONTENT) VALUES (?,?,?)</insertTU_NOTE>
		<insertTU_PROP>INSERT INTO TU_PROP (TUID, PROPTYPE, CONTENT) VALUES (?,?,?)</insertTU_PROP>
		<retrieveAllTU>SELECT TUID, CREATIONID, CREATIONDATE, CHANGEDATE, CREATIONTOOL, CREATIONTOOLVERSION FROM TU</retrieveAllTU>
		<retrieveAllTUV>SELECT LANG,SEG, CREATIONID, CREATIONDATE, CHANGEDATE, CREATIONTOOL, CREATIONTOOLVERSION, TUVTEXT FROM TUV WHERE TUID=?</retrieveAllTUV>
		<retrieveTU_NOTE>SELECT CONTENT FROM TU_NOTE WHERE TUID = ?</retrieveTU_NOTE>
		<retrieveTU_PROP>SELECT PROPTYPE, CONTENT FROM TU_PROP WHERE TUID = ?</retrieveTU_PROP>
		<getRegexMatchRowCount>SELECT COUNT(TUID) FROM TUV A WHERE LANG=? AND REGEXP(?,?)</getRegexMatchRowCount>
		<getRegexMatchRows2>SELECT LIMIT ? ? A.TUID ATUID,A.LANG ALANG,B.LANG BLANG,A.SEG ASEG,B.SEG BSEG,A.PURETEXT APURETEXT,B.PURETEXT BPURETEXT,A.CLIENTID ACLIENTID,B.CLIENTID BCLIENTID,A.CREATIONID ACREATIONID,B.CREATIONID BCREATIONID,A.CREATIONDATE ACREATIONDATE,B.CREATIONDATE BCREATIONDATE,A.CHANGEID ACHANGEID,B.CHANGEID BCHANGEID,A.CHANGEDATE ACHANGEDATE,B.CHANGEDATE BCHANGEDATE,A.PROJECTREF APROJECTREF,B.PROJECTREF BPROJECTREF,A.JOBREF AJOBREF,B.JOBREF BJOBREF FROM TUV A LEFT JOIN TUV B ON A.TUID = B.TUID AND B.LANG=? WHERE REGEXP(?,?) AND A.LANG=? ORDER BY __ORDERBY__</getRegexMatchRows2>
		<getRegexMatchRows3>SELECT LIMIT ? ? A.TUID ATUID,A.LANG ALANG,B.LANG BLANG,C.LANG CLANG,A.SEG ASEG,B.SEG BSEG,C.SEG CSEG,A.PURETEXT APURETEXT,B.PURETEXT BPURETEXT,C.PURETEXT CPURETEXT,A.CLIENTID ACLIENTID,B.CLIENTID BCLIENTID,C.CLIENTID CCLIENTID,A.CREATIONID ACREATIONID,B.CREATIONID BCREATIONID,C.CREATIONID CCREATIONID,A.CREATIONDATE ACREATIONDATE,B.CREATIONDATE BCREATIONDATE,C.CREATIONDATE CCREATIONDATE,A.CHANGEID ACHANGEID,B.CHANGEID BCHANGEID,C.CHANGEID CCHANGEID,A.CHANGEDATE ACHANGEDATE,B.CHANGEDATE BCHANGEDATE,C.CHANGEDATE CCHANGEDATE,A.PROJECTREF APROJECTREF,B.PROJECTREF BPROJECTREF,C.PROJECTREF CPROJECTREF,A.JOBREF AJOBREF,B.JOBREF BJOBREF,C.JOBREF CJOBREF FROM TUV A LEFT JOIN TUV B ON A.TUID = B.TUID AND B.LANG=? LEFT JOIN TUV C ON A.TUID = C.TUID AND C.LANG=? WHERE REGEXP(?,?) AND A.LANG=? ORDER BY __ORDERBY__</getRegexMatchRows3>
		<getFuzzyMatchRowCount>SELECT COUNT(TUID) FROM TUV A WHERE LANG=? AND (__CONDITION__)</getFuzzyMatchRowCount>
		<getFuzzyMatchRows2>SELECT LIMIT ? ? A.TUID ATUID,A.LANG ALANG,B.LANG BLANG,A.SEG ASEG,B.SEG BSEG,A.PURETEXT APURETEXT,B.PURETEXT BPURETEXT,A.CLIENTID ACLIENTID,B.CLIENTID BCLIENTID,A.CREATIONID ACREATIONID,B.CREATIONID BCREATIONID,A.CREATIONDATE ACREATIONDATE,B.CREATIONDATE BCREATIONDATE,A.CHANGEID ACHANGEID,B.CHANGEID BCHANGEID,A.CHANGEDATE ACHANGEDATE,B.CHANGEDATE BCHANGEDATE,A.PROJECTREF APROJECTREF,B.PROJECTREF BPROJECTREF,A.JOBREF AJOBREF,B.JOBREF BJOBREF FROM TUV A LEFT JOIN TUV B ON A.TUID = B.TUID AND B.LANG=? WHERE A.LANG=? AND ( __CONDITION__ ) ORDER BY __ORDERBY__</getFuzzyMatchRows2>
		<getFuzzyMatchRows3>SELECT LIMIT ? ? A.TUID ATUID,A.LANG ALANG,B.LANG BLANG,C.LANG CLANG,A.SEG ASEG,B.SEG BSEG,C.SEG CSEG,A.PURETEXT APURETEXT,B.PURETEXT BPURETEXT,C.PURETEXT CPURETEXT,A.CLIENTID ACLIENTID,B.CLIENTID BCLIENTID,C.CLIENTID CCLIENTID,A.CREATIONID ACREATIONID,B.CREATIONID BCREATIONID,C.CREATIONID CCREATIONID,A.CREATIONDATE ACREATIONDATE,B.CREATIONDATE BCREATIONDATE,C.CREATIONDATE CCREATIONDATE,A.CHANGEID ACHANGEID,B.CHANGEID BCHANGEID,C.CHANGEID CCHANGEID,A.CHANGEDATE ACHANGEDATE,B.CHANGEDATE BCHANGEDATE,C.CHANGEDATE CCHANGEDATE,A.PROJECTREF APROJECTREF,B.PROJECTREF BPROJECTREF,C.PROJECTREF CPROJECTREF,A.JOBREF AJOBREF,B.JOBREF BJOBREF,C.JOBREF CJOBREF FROM TUV A LEFT JOIN TUV B ON A.TUID = B.TUID AND B.LANG=? LEFT JOIN TUV C ON A.TUID = C.TUID AND C.LANG=? WHERE A.LANG=? AND ( __CONDITION__ ) ORDER BY __ORDERBY__</getFuzzyMatchRows3>
		<getMatchTUV>SELECT LANG, SEG, PURETEXT, CREATIONID, CREATIONDATE, CHANGEID, CHANGEDATE, PREVIOUSHASH, NEXTHASH, PROJECTREF, JOBREF FROM TUV WHERE TUID=? AND (LANG=? OR LANG=?)</getMatchTUV>
		<getMatchTUV4QT>SELECT LANG, SEG, PURETEXT FROM TUV WHERE TUID=? AND (LANG=? OR LANG=?)</getMatchTUV4QT>
		<getAllLanguages>SELECT DISTINCT LANG FROM TUV</getAllLanguages>
		<getProjects>SELECT DISTINCT CONTENT FROM TU_PROP WHERE PROPTYPE='projectref' ORDER BY 1</getProjects>
		<getJobs>SELECT DISTINCT CONTENT FROM TU_PROP WHERE PROPTYPE='jobref' ORDER BY 1</getJobs>
		<getJobDates>SELECT DISTINCT CONTENT FROM TU_PROP WHERE PROPTYPE='jobdate' ORDER BY 1</getJobDates>
		<getOwners>SELECT DISTINCT CONTENT FROM TU_PROP WHERE PROPTYPE='jobowner' ORDER BY 1</getOwners>
		<retrieveTUV_LIST>SELECT LANG FROM TUV WHERE TUID=?</retrieveTUV_LIST>
		<getTerm>SELECT L.TUID,L.PURETEXT,R.PURETEXT FROM TUV L LEFT JOIN TUV R ON L.TUID=R.TUID AND R.LANG=? WHERE L.LANG=? AND LOCATE(L.PURETEXT,?) AND R.PURETEXT IS NOT NULL</getTerm>
		<getTUFlag>SELECT COUNT(*) FROM TU_PROP WHERE TUID=? AND PROPTYPE='x-flag' AND CONTENT='HS-Flag'</getTUFlag>
		<retrieveAllTUVByTUIDs>SELECT * FROM TUV WHERE TUID IN (?)</retrieveAllTUVByTUIDs>
		<retrieveTU_NOTEByTUIDs>SELECT CONTENT FROM TU_NOTE WHERE TUID IN (?)</retrieveTU_NOTEByTUIDs>
		<retrieveTU_PROPByTUIDs>SELECT PROPTYPE, CONTENT FROM TU_PROP WHERE TUID IN (?)</retrieveTU_PROPByTUIDs>
		<removeTUVByTUIDs>DELETE FROM TUV WHERE TUID IN (?)</removeTUVByTUIDs>
		<removeTUByTUIDs>DELETE FROM TU WHERE TUID IN (?)</removeTUByTUIDs>
		<removeTU_PROPByTUIDs>DELETE FROM TU_PROP WHERE TUID IN (?)</removeTU_PROPByTUIDs>
		<removeTU_NOTEByTUIDs>DELETE FROM TU_NOTE WHERE TUID IN (?)</removeTU_NOTEByTUIDs>
		<removeMATRIXByTUIDs>DELETE FROM MATRIX___LANG__ WHERE TUID IN (?)</removeMATRIXByTUIDs>
	</dbtype>


	<!--
		MySQL 4.x
	-->

	<dbtype name="MySQL 4.x" filebased="No" port="3306">
		<driver>com.mysql.jdbc.Driver</driver>
		<url>jdbc:mysql://__SERVER_NAME__:__PORT_NUMBER__/__DATABASE_NAME__</url>
		<config-property>
			<property name="user">__USER__</property>
			<property name="password">__PASSWORD__</property>
			<property name="useUnicode">true</property>
			<property name="characterEncoding">UTF-8</property>
		</config-property>
		<create-hssysdb>CREATE DATABASE __DATABASE_NAME__ CHARACTER SET utf8</create-hssysdb>
		<create-hssystables>
			<step>CREATE TABLE HSDB7LIST (
				DBNAME VARCHAR(150) NOT NULL,
				QUALITY CHAR(1) NOT NULL,
				PRIMARY KEY (DBNAME)
				)</step>
		</create-hssystables>
		<insert-db>INSERT INTO HSDB7LIST (DBNAME,QUALITY) VALUES (?,?)</insert-db>
		<remove-db>DELETE FROM HSDB7LIST WHERE DBNAME=?</remove-db>
		<get-dblist>SELECT DBNAME, QUALITY FROM HSDB7LIST</get-dblist>
		<create-database>CREATE DATABASE __DATABASE_NAME__ CHARACTER SET utf8</create-database>
		<create-tables>
			<step>CREATE TABLE TU (
				TUID VARCHAR(30) NOT NULL,
				CREATIONID VARCHAR(30),
				CREATIONDATE DATETIME,
				CHANGEID VARCHAR(30),
				CHANGEDATE DATETIME,
				CREATIONTOOL VARCHAR(200),
				CREATIONTOOLVERSION VARCHAR(200),
				PRIMARY KEY (TUID)
				);</step>
			<step>CREATE TABLE TUV (
				TUID VARCHAR(30) NOT NULL,
				LANG VARCHAR(6) NOT NULL,
				SEG TEXT NOT NULL,
				PURETEXT TEXT,
				CLIENTID TEXT,
				CREATIONID VARCHAR(30),
				CREATIONDATE DATETIME,
				CHANGEID VARCHAR(30),
				CHANGEDATE DATETIME,
				CREATIONTOOL VARCHAR(200),
				CREATIONTOOLVERSION VARCHAR(200),
				HASH INTEGER NOT NULL,
				TUVTEXT TEXT NOT NULL,
				PREVIOUSHASH TEXT,
				NEXTHASH TEXT,
				PROJECTREF VARCHAR(256),
				JOBREF VARCHAR(256),
				PRIMARY KEY (TUID,LANG),
				FOREIGN KEY (TUID) REFERENCES TU(TUID),
				INDEX I_TUV_LANG (LANG),
				INDEX I_TUV_HASH (HASH),
				INDEX I_TUV_CHANGEDATE(CHANGEDATE)
				);</step>
			<step>CREATE TABLE TU_NOTE (
				TUID VARCHAR(30) NOT NULL,
				NOTEID VARCHAR(30) NOT NULL,
				CONTENT TEXT,
				PRIMARY KEY (tuid, NOTEID)
				);</step>
			<step>CREATE TABLE TU_PROP (
				TUID VARCHAR(30) NOT NULL,
				PROPTYPE VARCHAR(30) NOT NULL,
				CONTENT TEXT,
				PRIMARY KEY (TUID, PROPTYPE)
				);</step>
			<step>CREATE TABLE LANGS (
				LANG VARCHAR(6) NOT NULL,
				INDEX I_LANGS_LANG (LANG)
				);</step>
		</create-tables>
		<drop-tables>
			<drop-table>DROP TABLE TU_PROP</drop-table>
			<drop-table>DROP TABLE TU_NOTE</drop-table>
			<drop-table>DROP TABLE TUV</drop-table>
			<drop-table>DROP TABLE TU</drop-table>
			<drop-table>DROP TABLE LANGS</drop-table>
		</drop-tables>
		<readLanguages>SELECT LANG FROM LANGS</readLanguages>
		<createMatrix>CREATE TABLE MATRIX___LANG__ (
				TUID VARCHAR(30) NOT NULL,
				NGRAM INTEGER NOT NULL,
				SEGSIZE INTEGER,
				PRIMARY KEY (TUID,NGRAM),
				INDEX I_MATRIX_SEGSIZE (SEGSIZE)
				);</createMatrix>
		<removeMatrixLang>DROP TABLE MATRIX___LANG__</removeMatrixLang>
		<addLanguage>INSERT INTO LANGS (LANG) VALUES (?);</addLanguage>
		<drop-database>DROP DATABASE __DATABASE_NAME__</drop-database>
		<insertMATRIX>INSERT INTO MATRIX___LANG__ (TUID, NGRAM, SEGSIZE) VALUES
			(?,?,?);</insertMATRIX>
		<searchMATRIX>SELECT TUID FROM MATRIX___LANG__ WHERE NGRAM IN
			(__SET__) AND SEGSIZE &gt;=? AND SEGSIZE&lt;=?</searchMATRIX>
		<searchTranslation>SELECT TUID FROM TUV WHERE PURETEXT=? AND LANG=?</searchTranslation>
		<freeSearch>SELECT TUID,NGRAM FROM MATRIX___LANG__ WHERE NGRAM IN (__SET__)</freeSearch>
		<retrieveTUV>SELECT TUID, LANG, SEG, PURETEXT, CREATIONID,
			CREATIONDATE, CHANGEDATE, CREATIONTOOL, CREATIONTOOLVERSION, TUVTEXT FROM
			TUV IGNORE INDEX(I_TUV_LANG) WHERE TUID=? AND LANG=?</retrieveTUV>
		<retrieveTUV_SEG>SELECT TUID, SEG FROM TUV IGNORE INDEX(I_TUV_LANG) WHERE HASH=? AND LANG=?</retrieveTUV_SEG>
		<retrieveTUV_SEG_CONTEXT>SELECT TUID, SEG FROM TUV IGNORE INDEX(I_TUV_LANG) WHERE HASH=? AND LANG=? AND PREVIOUSHASH=? AND NEXTHASH=?</retrieveTUV_SEG_CONTEXT>
		<removeMATRIX>DELETE FROM MATRIX___LANG__ WHERE TUID=?</removeMATRIX>
		<insertTU>INSERT INTO TU (TUID, CREATIONID, CREATIONDATE, CHANGEID, CHANGEDATE,
			CREATIONTOOL, CREATIONTOOLVERSION) VALUES (?,?,?,?,?,?,?);</insertTU>
		<updateTU>UPDATE TU SET CREATIONID=?,CREATIONDATE=?,CHANGEID=?,CHANGEDATE=?,CREATIONTOOL=?,CREATIONTOOLVERSION=? WHERE TUID=?</updateTU>
		<retrieveTU>SELECT TUID, CREATIONID, CREATIONDATE, CHANGEDATE,
			CREATIONTOOL, CREATIONTOOLVERSION FROM TU WHERE TUID=?</retrieveTU>
		<insertTUV>INSERT INTO TUV (TUID, LANG, SEG, PURETEXT, CLIENTID, CREATIONID,
			CREATIONDATE, CHANGEID, CHANGEDATE, CREATIONTOOL, CREATIONTOOLVERSION, HASH,
			TUVTEXT, PREVIOUSHASH, NEXTHASH, PROJECTREF, JOBREF) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)</insertTUV>
		<removeTUV>DELETE FROM TUV WHERE TUID=? AND LANG=?</removeTUV>
		<removeTU>DELETE FROM TU WHERE TUID=?</removeTU>
		<removeTU_PROP>DELETE FROM TU_PROP WHERE TUID=?</removeTU_PROP>
		<removeOneTU_PROP>DELETE FROM TU_PROP WHERE TUID=? AND PROPTYPE=? AND CONTENT=?</removeOneTU_PROP>
		<removeTU_NOTE>DELETE FROM TU_NOTE WHERE TUID=?</removeTU_NOTE>
		<insertTU_NOTE>INSERT INTO TU_NOTE (TUID, NOTEID, CONTENT) VALUES (?,?,?)</insertTU_NOTE>
		<insertTU_PROP>INSERT INTO TU_PROP (TUID, PROPTYPE, CONTENT) VALUES	(?,?,?)</insertTU_PROP>
		<retrieveAllTU>SELECT TUID, CREATIONID, CREATIONDATE, CHANGEDATE, CREATIONTOOL, CREATIONTOOLVERSION FROM TU</retrieveAllTU>
		<retrieveAllTUV>SELECT LANG, SEG, CREATIONID, CREATIONDATE, CHANGEDATE,	CREATIONTOOL, CREATIONTOOLVERSION, TUVTEXT FROM TUV WHERE TUID=?</retrieveAllTUV>
		<retrieveTU_NOTE>SELECT CONTENT FROM TU_NOTE WHERE TUID=?</retrieveTU_NOTE>
		<retrieveTU_PROP>SELECT PROPTYPE, CONTENT FROM TU_PROP WHERE TUID=?</retrieveTU_PROP>
		<getRegexMatchRowCount>SELECT COUNT(TUID) FROM TUV A WHERE LANG=? AND ? REGEXP ?</getRegexMatchRowCount>
		<getRegexMatchRows2>SELECT A.TUID ATUID,A.LANG ALANG,B.LANG BLANG,A.SEG ASEG,B.SEG BSEG,A.PURETEXT APURETEXT,B.PURETEXT BPURETEXT,A.CLIENTID ACLIENTID,B.CLIENTID BCLIENTID,A.CREATIONID ACREATIONID,B.CREATIONID BCREATIONID,A.CREATIONDATE ACREATIONDATE,B.CREATIONDATE BCREATIONDATE,A.CHANGEID ACHANGEID,B.CHANGEID BCHANGEID,A.CHANGEDATE ACHANGEDATE,B.CHANGEDATE BCHANGEDATE,A.PROJECTREF APROJECTREF,B.PROJECTREF BPROJECTREF,A.JOBREF AJOBREF,B.JOBREF BJOBREF FROM TUV A LEFT JOIN TUV B ON A.TUID = B.TUID AND B.LANG=? WHERE ? REGEXP ? AND A.LANG=? ORDER BY __ORDERBY__ LIMIT ?,?</getRegexMatchRows2>
		<getRegexMatchRows3>SELECT A.TUID ATUID,A.LANG ALANG,B.LANG BLANG,C.LANG CLANG,A.SEG ASEG,B.SEG BSEG,C.SEG CSEG,A.PURETEXT APURETEXT,B.PURETEXT BPURETEXT,C.PURETEXT CPURETEXT,A.CLIENTID ACLIENTID,B.CLIENTID BCLIENTID,C.CLIENTID CCLIENTID,A.CREATIONID ACREATIONID,B.CREATIONID BCREATIONID,C.CREATIONID CCREATIONID,A.CREATIONDATE ACREATIONDATE,B.CREATIONDATE BCREATIONDATE,C.CREATIONDATE CCREATIONDATE,A.CHANGEID ACHANGEID,B.CHANGEID BCHANGEID,C.CHANGEID CCHANGEID,A.CHANGEDATE ACHANGEDATE,B.CHANGEDATE BCHANGEDATE,C.CHANGEDATE CCHANGEDATE,A.PROJECTREF APROJECTREF,B.PROJECTREF BPROJECTREF,C.PROJECTREF CPROJECTREF,A.JOBREF AJOBREF,B.JOBREF BJOBREF,C.JOBREF CJOBREF FROM TUV A LEFT JOIN TUV B ON A.TUID = B.TUID AND B.LANG=? LEFT JOIN TUV C ON A.TUID = C.TUID AND C.LANG=? WHERE ? REGEXP ? AND A.LANG=? ORDER BY __ORDERBY__ LIMIT ?,?</getRegexMatchRows3>
		<getFuzzyMatchRowCount>SELECT COUNT(TUID) FROM TUV A WHERE LANG=? AND (__CONDITION__)</getFuzzyMatchRowCount>
		<getFuzzyMatchRows2>SELECT A.TUID ATUID,A.LANG ALANG,B.LANG BLANG,A.SEG ASEG,B.SEG BSEG,A.PURETEXT APURETEXT,B.PURETEXT BPURETEXT,A.CLIENTID ACLIENTID,B.CLIENTID BCLIENTID,A.CREATIONID ACREATIONID,B.CREATIONID BCREATIONID,A.CREATIONDATE ACREATIONDATE,B.CREATIONDATE BCREATIONDATE,A.CHANGEID ACHANGEID,B.CHANGEID BCHANGEID,A.CHANGEDATE ACHANGEDATE,B.CHANGEDATE BCHANGEDATE,A.PROJECTREF APROJECTREF,B.PROJECTREF BPROJECTREF,A.JOBREF AJOBREF,B.JOBREF BJOBREF FROM TUV A LEFT JOIN TUV B ON A.TUID = B.TUID AND B.LANG=? WHERE A.LANG=? AND ( __CONDITION__ ) ORDER BY __ORDERBY__ LIMIT ?,?</getFuzzyMatchRows2>
		<getFuzzyMatchRows3>SELECT A.TUID ATUID,A.LANG ALANG,B.LANG BLANG,C.LANG CLANG,A.SEG ASEG,B.SEG BSEG,C.SEG CSEG,A.PURETEXT APURETEXT,B.PURETEXT BPURETEXT,C.PURETEXT CPURETEXT,A.CLIENTID ACLIENTID,B.CLIENTID BCLIENTID,C.CLIENTID CCLIENTID,A.CREATIONID ACREATIONID,B.CREATIONID BCREATIONID,C.CREATIONID CCREATIONID,A.CREATIONDATE ACREATIONDATE,B.CREATIONDATE BCREATIONDATE,C.CREATIONDATE CCREATIONDATE,A.CHANGEID ACHANGEID,B.CHANGEID BCHANGEID,C.CHANGEID CCHANGEID,A.CHANGEDATE ACHANGEDATE,B.CHANGEDATE BCHANGEDATE,C.CHANGEDATE CCHANGEDATE,A.PROJECTREF APROJECTREF,B.PROJECTREF BPROJECTREF,C.PROJECTREF CPROJECTREF,A.JOBREF AJOBREF,B.JOBREF BJOBREF,C.JOBREF CJOBREF FROM TUV A LEFT JOIN TUV B ON A.TUID = B.TUID AND B.LANG=? LEFT JOIN TUV C ON A.TUID = C.TUID AND C.LANG=? WHERE A.LANG=? AND ( __CONDITION__ ) ORDER BY __ORDERBY__ LIMIT ?,?</getFuzzyMatchRows3>
		<getMatchTUV>SELECT LANG, SEG, PURETEXT, CREATIONID, CREATIONDATE, CHANGEID, CHANGEDATE, PREVIOUSHASH, NEXTHASH, PROJECTREF, JOBREF FROM TUV WHERE TUID=? AND LANG IN (?,?)</getMatchTUV>
		<getMatchTUV4QT>SELECT LANG, SEG, PURETEXT FROM	TUV WHERE TUID=? AND LANG IN (?,?)</getMatchTUV4QT>
		<getAllLanguages>SELECT DISTINCT LANG FROM TUV</getAllLanguages>
		<getProjects>SELECT DISTINCT CONTENT FROM TU_PROP WHERE	PROPTYPE='projectref' ORDER BY 1</getProjects>
		<getJobs>SELECT DISTINCT CONTENT FROM TU_PROP WHERE PROPTYPE='jobref' ORDER BY 1</getJobs>
		<getJobDates>SELECT DISTINCT CONTENT FROM TU_PROP WHERE PROPTYPE='jobdate' ORDER BY 1</getJobDates>
		<getOwners>SELECT DISTINCT CONTENT FROM TU_PROP WHERE PROPTYPE='jobowner' ORDER BY 1</getOwners>
		<retrieveTUV_LIST>SELECT LANG FROM TUV WHERE TUID=?</retrieveTUV_LIST>
		<getTerm>SELECT L.TUID,L.PURETEXT,R.PURETEXT FROM TUV L LEFT JOIN TUV R ON L.TUID=R.TUID AND R.LANG=? WHERE L.LANG=? AND LOCATE(L.PURETEXT,?) AND R.PURETEXT IS NOT NULL</getTerm>
		<getTUFlag>SELECT COUNT(*) FROM TU_PROP WHERE TUID=? AND PROPTYPE='x-flag' AND CONTENT='HS-Flag'</getTUFlag>
		<retrieveAllTUVByTUIDs>SELECT * FROM TUV WHERE TUID IN (?)</retrieveAllTUVByTUIDs>
		<retrieveTU_NOTEByTUIDs>SELECT CONTENT FROM TU_NOTE WHERE TUID IN (?)</retrieveTU_NOTEByTUIDs>
		<retrieveTU_PROPByTUIDs>SELECT PROPTYPE, CONTENT FROM TU_PROP WHERE TUID IN (?)</retrieveTU_PROPByTUIDs>
		<removeTUVByTUIDs>DELETE FROM TUV WHERE TUID IN (?)</removeTUVByTUIDs>
		<removeTUByTUIDs>DELETE FROM TU WHERE TUID IN (?)</removeTUByTUIDs>
		<removeTU_PROPByTUIDs>DELETE FROM TU_PROP WHERE TUID IN (?)</removeTU_PROPByTUIDs>
		<removeTU_NOTEByTUIDs>DELETE FROM TU_NOTE WHERE TUID IN (?)</removeTU_NOTEByTUIDs>
		<removeMATRIXByTUIDs>DELETE FROM MATRIX___LANG__ WHERE TUID IN (?)</removeMATRIXByTUIDs>
	</dbtype>

	<!--
		MySQL 5.x
	-->

	<dbtype name="MySQL 5.x" filebased="No" port="3306">
		<driver>com.mysql.jdbc.Driver</driver>
		<url>jdbc:mysql://__SERVER_NAME__:__PORT_NUMBER__/__DATABASE_NAME__</url>
		<config-property>
			<property name="user">__USER__</property>
			<property name="password">__PASSWORD__</property>
			<property name="useUnicode">true</property>
			<property name="characterEncoding">UTF-8</property>
		</config-property>
		<create-hssysdb>CREATE DATABASE __DATABASE_NAME__ CHARACTER SET utf8</create-hssysdb>
		<create-hssystables>
			<step>CREATE TABLE HSDB7LIST (
				DBNAME VARCHAR(150) NOT NULL,
				QUALITY CHAR(1) NOT NULL,
				PRIMARY KEY (DBNAME)
				)</step>
		</create-hssystables>
		<insert-db>INSERT INTO HSDB7LIST (DBNAME,QUALITY) VALUES (?,?)</insert-db>
		<remove-db>DELETE FROM HSDB7LIST WHERE DBNAME=?</remove-db>
		<get-dblist>SELECT DBNAME, QUALITY FROM HSDB7LIST</get-dblist>
		<create-database>CREATE DATABASE __DATABASE_NAME__ CHARACTER SET utf8</create-database>
		<create-tables>
			<step>CREATE TABLE TU (
				TUID VARCHAR(30) NOT NULL,
				CREATIONID VARCHAR(30),
				CREATIONDATE DATETIME,
				CHANGEID VARCHAR(30),
				CHANGEDATE DATETIME,
				CREATIONTOOL VARCHAR(200),
				CREATIONTOOLVERSION VARCHAR(200),
				PRIMARY KEY (TUID)
				);</step>
			<step>CREATE TABLE TUV (
				TUID VARCHAR(30) NOT NULL,
				LANG VARCHAR(6) NOT NULL,
				SEG TEXT NOT NULL,
				PURETEXT TEXT,
				CLIENTID TEXT,
				CREATIONID VARCHAR(30),
				CREATIONDATE DATETIME,
				CHANGEID VARCHAR(30),
				CHANGEDATE DATETIME,
				CREATIONTOOL VARCHAR(200),
				CREATIONTOOLVERSION VARCHAR(200),
				HASH INTEGER NOT NULL,
				TUVTEXT TEXT NOT NULL,
				PREVIOUSHASH TEXT,
				NEXTHASH TEXT,
				PROJECTREF VARCHAR(256),
				JOBREF VARCHAR(256),
				PRIMARY KEY (TUID,LANG),
				FOREIGN KEY (TUID) REFERENCES TU(TUID),
				INDEX I_TUV_LANG (LANG),
				INDEX I_TUV_HASH (HASH),
				INDEX I_TUV_CHANGEDATE(CHANGEDATE)
				);</step>
			<step>CREATE TABLE TU_NOTE (
				TUID VARCHAR(30) NOT NULL,
				NOTEID VARCHAR(30) NOT NULL,
				CONTENT TEXT,
				PRIMARY KEY (tuid, NOTEID)
				);</step>
			<step>CREATE TABLE TU_PROP (
				TUID VARCHAR(30) NOT NULL,
				PROPTYPE VARCHAR(30) NOT NULL,
				CONTENT TEXT,
				PRIMARY KEY (TUID, PROPTYPE)
				);</step>
			<step>CREATE TABLE LANGS (
				LANG VARCHAR(6) NOT NULL,
				INDEX I_LANGS_LANG (LANG)
				);</step>
		</create-tables>
		<drop-tables>
			<drop-table>DROP TABLE TU_PROP</drop-table>
			<drop-table>DROP TABLE TU_NOTE</drop-table>
			<drop-table>DROP TABLE TUV</drop-table>
			<drop-table>DROP TABLE TU</drop-table>
			<drop-table>DROP TABLE LANGS</drop-table>
		</drop-tables>
		<readLanguages>SELECT LANG FROM LANGS</readLanguages>
		<createMatrix>CREATE TABLE MATRIX___LANG__ (
				TUID VARCHAR(30) NOT NULL,
				NGRAM INTEGER NOT NULL,
				SEGSIZE INTEGER,
				PRIMARY KEY (TUID,NGRAM),
				INDEX I_MATRIX_SEGSIZE (SEGSIZE)
				);</createMatrix>
		<removeMatrixLang>DROP TABLE MATRIX___LANG__</removeMatrixLang>
		<addLanguage>INSERT INTO LANGS (LANG) VALUES (?);</addLanguage>
		<drop-database>DROP DATABASE __DATABASE_NAME__</drop-database>
		<insertMATRIX>INSERT INTO MATRIX___LANG__ (TUID, NGRAM, SEGSIZE) VALUES
			(?,?,?);</insertMATRIX>
		<searchMATRIX>SELECT TUID FROM MATRIX___LANG__ WHERE NGRAM IN
			(__SET__) AND SEGSIZE &gt;=? AND SEGSIZE&lt;=?</searchMATRIX>
		<searchTranslation>SELECT TUID FROM TUV WHERE PURETEXT=? AND LANG=?</searchTranslation>
		<freeSearch>SELECT TUID,NGRAM FROM MATRIX___LANG__ WHERE NGRAM IN (__SET__)</freeSearch>
		<retrieveTUV>SELECT TUID, LANG, SEG, PURETEXT, CREATIONID,
			CREATIONDATE, CHANGEDATE, CREATIONTOOL, CREATIONTOOLVERSION, TUVTEXT FROM
			TUV IGNORE INDEX(I_TUV_LANG) WHERE TUID=? AND LANG=?</retrieveTUV>
		<retrieveTUV_SEG>SELECT TUID, SEG FROM TUV IGNORE INDEX(I_TUV_LANG) WHERE HASH=? AND LANG=?</retrieveTUV_SEG>
		<retrieveTUV_SEG_CONTEXT>SELECT TUID, SEG FROM TUV IGNORE INDEX(I_TUV_LANG) WHERE HASH=? AND LANG=? AND PREVIOUSHASH=? AND NEXTHASH=?</retrieveTUV_SEG_CONTEXT>
		<removeMATRIX>DELETE FROM MATRIX___LANG__ WHERE TUID=?</removeMATRIX>
		<insertTU>INSERT INTO TU (TUID, CREATIONID, CREATIONDATE, CHANGEID, CHANGEDATE,
			CREATIONTOOL, CREATIONTOOLVERSION) VALUES (?,?,?,?,?,?,?);</insertTU>
		<updateTU>UPDATE TU SET CREATIONID=?,CREATIONDATE=?,CHANGEID=?,CHANGEDATE=?,CREATIONTOOL=?,CREATIONTOOLVERSION=? WHERE TUID=?</updateTU>
		<retrieveTU>SELECT TUID, CREATIONID, CREATIONDATE, CHANGEDATE,
			CREATIONTOOL, CREATIONTOOLVERSION FROM TU WHERE TUID=?</retrieveTU>
		<insertTUV>INSERT INTO TUV (TUID, LANG, SEG, PURETEXT, CLIENTID, CREATIONID,
			CREATIONDATE, CHANGEID, CHANGEDATE, CREATIONTOOL, CREATIONTOOLVERSION, HASH,
			TUVTEXT, PREVIOUSHASH, NEXTHASH, PROJECTREF, JOBREF) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)</insertTUV>
		<removeTUV>DELETE FROM TUV WHERE TUID=? AND LANG=?</removeTUV>
		<removeTU>DELETE FROM TU WHERE TUID=?</removeTU>
		<removeTU_PROP>DELETE FROM TU_PROP WHERE TUID=?</removeTU_PROP>
		<removeOneTU_PROP>DELETE FROM TU_PROP WHERE TUID=? AND PROPTYPE=? AND CONTENT=?</removeOneTU_PROP>
		<removeTU_NOTE>DELETE FROM TU_NOTE WHERE TUID=?</removeTU_NOTE>
		<insertTU_NOTE>INSERT INTO TU_NOTE (TUID, NOTEID, CONTENT) VALUES (?,?,?)</insertTU_NOTE>
		<insertTU_PROP>INSERT INTO TU_PROP (TUID, PROPTYPE, CONTENT) VALUES	(?,?,?)</insertTU_PROP>
		<retrieveAllTU>SELECT TUID, CREATIONID, CREATIONDATE, CHANGEDATE, CREATIONTOOL, CREATIONTOOLVERSION FROM TU</retrieveAllTU>
		<retrieveAllTUV>SELECT LANG, SEG, CREATIONID, CREATIONDATE, CHANGEDATE,	CREATIONTOOL, CREATIONTOOLVERSION, TUVTEXT FROM TUV WHERE TUID=?</retrieveAllTUV>
		<retrieveTU_NOTE>SELECT CONTENT FROM TU_NOTE WHERE TUID=?</retrieveTU_NOTE>
		<retrieveTU_PROP>SELECT PROPTYPE, CONTENT FROM TU_PROP WHERE TUID=?</retrieveTU_PROP>
		<getRegexMatchRowCount>SELECT COUNT(TUID) FROM TUV A WHERE LANG=? AND ? REGEXP ?</getRegexMatchRowCount>
		<getRegexMatchRows2>SELECT A.TUID ATUID,A.LANG ALANG,B.LANG BLANG,A.SEG ASEG,B.SEG BSEG,A.PURETEXT APURETEXT,B.PURETEXT BPURETEXT,A.CLIENTID ACLIENTID,B.CLIENTID BCLIENTID,A.CREATIONID ACREATIONID,B.CREATIONID BCREATIONID,A.CREATIONDATE ACREATIONDATE,B.CREATIONDATE BCREATIONDATE,A.CHANGEID ACHANGEID,B.CHANGEID BCHANGEID,A.CHANGEDATE ACHANGEDATE,B.CHANGEDATE BCHANGEDATE,A.PROJECTREF APROJECTREF,B.PROJECTREF BPROJECTREF,A.JOBREF AJOBREF,B.JOBREF BJOBREF FROM TUV A LEFT JOIN TUV B ON A.TUID = B.TUID AND B.LANG=? WHERE ? REGEXP ? AND A.LANG=? ORDER BY __ORDERBY__ LIMIT ?,?</getRegexMatchRows2>
		<getRegexMatchRows3>SELECT A.TUID ATUID,A.LANG ALANG,B.LANG BLANG,C.LANG CLANG,A.SEG ASEG,B.SEG BSEG,C.SEG CSEG,A.PURETEXT APURETEXT,B.PURETEXT BPURETEXT,C.PURETEXT CPURETEXT,A.CLIENTID ACLIENTID,B.CLIENTID BCLIENTID,C.CLIENTID CCLIENTID,A.CREATIONID ACREATIONID,B.CREATIONID BCREATIONID,C.CREATIONID CCREATIONID,A.CREATIONDATE ACREATIONDATE,B.CREATIONDATE BCREATIONDATE,C.CREATIONDATE CCREATIONDATE,A.CHANGEID ACHANGEID,B.CHANGEID BCHANGEID,C.CHANGEID CCHANGEID,A.CHANGEDATE ACHANGEDATE,B.CHANGEDATE BCHANGEDATE,C.CHANGEDATE CCHANGEDATE,A.PROJECTREF APROJECTREF,B.PROJECTREF BPROJECTREF,C.PROJECTREF CPROJECTREF,A.JOBREF AJOBREF,B.JOBREF BJOBREF,C.JOBREF CJOBREF FROM TUV A LEFT JOIN TUV B ON A.TUID = B.TUID AND B.LANG=? LEFT JOIN TUV C ON A.TUID = C.TUID AND C.LANG=? WHERE ? REGEXP ? AND A.LANG=? ORDER BY __ORDERBY__ LIMIT ?,?</getRegexMatchRows3>
		<getFuzzyMatchRowCount>SELECT COUNT(TUID) FROM TUV A WHERE LANG=? AND (__CONDITION__)</getFuzzyMatchRowCount>
		<getFuzzyMatchRows2>SELECT A.TUID ATUID,A.LANG ALANG,B.LANG BLANG,A.SEG ASEG,B.SEG BSEG,A.PURETEXT APURETEXT,B.PURETEXT BPURETEXT,A.CLIENTID ACLIENTID,B.CLIENTID BCLIENTID,A.CREATIONID ACREATIONID,B.CREATIONID BCREATIONID,A.CREATIONDATE ACREATIONDATE,B.CREATIONDATE BCREATIONDATE,A.CHANGEID ACHANGEID,B.CHANGEID BCHANGEID,A.CHANGEDATE ACHANGEDATE,B.CHANGEDATE BCHANGEDATE,A.PROJECTREF APROJECTREF,B.PROJECTREF BPROJECTREF,A.JOBREF AJOBREF,B.JOBREF BJOBREF FROM TUV A LEFT JOIN TUV B ON A.TUID = B.TUID AND B.LANG=? WHERE A.LANG=? AND ( __CONDITION__ ) ORDER BY __ORDERBY__ LIMIT ?,?</getFuzzyMatchRows2>
		<getFuzzyMatchRows3>SELECT A.TUID ATUID,A.LANG ALANG,B.LANG BLANG,C.LANG CLANG,A.SEG ASEG,B.SEG BSEG,C.SEG CSEG,A.PURETEXT APURETEXT,B.PURETEXT BPURETEXT,C.PURETEXT CPURETEXT,A.CLIENTID ACLIENTID,B.CLIENTID BCLIENTID,C.CLIENTID CCLIENTID,A.CREATIONID ACREATIONID,B.CREATIONID BCREATIONID,C.CREATIONID CCREATIONID,A.CREATIONDATE ACREATIONDATE,B.CREATIONDATE BCREATIONDATE,C.CREATIONDATE CCREATIONDATE,A.CHANGEID ACHANGEID,B.CHANGEID BCHANGEID,C.CHANGEID CCHANGEID,A.CHANGEDATE ACHANGEDATE,B.CHANGEDATE BCHANGEDATE,C.CHANGEDATE CCHANGEDATE,A.PROJECTREF APROJECTREF,B.PROJECTREF BPROJECTREF,C.PROJECTREF CPROJECTREF,A.JOBREF AJOBREF,B.JOBREF BJOBREF,C.JOBREF CJOBREF FROM TUV A LEFT JOIN TUV B ON A.TUID = B.TUID AND B.LANG=? LEFT JOIN TUV C ON A.TUID = C.TUID AND C.LANG=? WHERE A.LANG=? AND ( __CONDITION__ ) ORDER BY __ORDERBY__ LIMIT ?,?</getFuzzyMatchRows3>
		<getMatchTUV>SELECT LANG, SEG, PURETEXT, CREATIONID, CREATIONDATE, CHANGEID, CHANGEDATE, PREVIOUSHASH, NEXTHASH, PROJECTREF, JOBREF FROM TUV WHERE TUID=? AND LANG IN (?,?)</getMatchTUV>
		<getMatchTUV4QT>SELECT LANG, SEG, PURETEXT FROM	TUV WHERE TUID=? AND LANG IN (?,?)</getMatchTUV4QT>
		<getAllLanguages>SELECT DISTINCT LANG FROM TUV</getAllLanguages>
		<getProjects>SELECT DISTINCT CONTENT FROM TU_PROP WHERE	PROPTYPE='projectref' ORDER BY 1</getProjects>
		<getJobs>SELECT DISTINCT CONTENT FROM TU_PROP WHERE PROPTYPE='jobref' ORDER BY 1</getJobs>
		<getJobDates>SELECT DISTINCT CONTENT FROM TU_PROP WHERE PROPTYPE='jobdate' ORDER BY 1</getJobDates>
		<getOwners>SELECT DISTINCT CONTENT FROM TU_PROP WHERE PROPTYPE='jobowner' ORDER BY 1</getOwners>
		<retrieveTUV_LIST>SELECT LANG FROM TUV WHERE TUID=?</retrieveTUV_LIST>
		<getTerm>SELECT L.TUID,L.PURETEXT,R.PURETEXT FROM TUV L LEFT JOIN TUV R ON L.TUID=R.TUID AND R.LANG=? WHERE L.LANG=? AND LOCATE(L.PURETEXT,?) AND R.PURETEXT IS NOT NULL</getTerm>
		<getTUFlag>SELECT COUNT(*) FROM TU_PROP WHERE TUID=? AND PROPTYPE='x-flag' AND CONTENT='HS-Flag'</getTUFlag>
		<retrieveAllTUVByTUIDs>SELECT * FROM TUV WHERE TUID IN (?)</retrieveAllTUVByTUIDs>
		<retrieveTU_NOTEByTUIDs>SELECT CONTENT FROM TU_NOTE WHERE TUID IN (?)</retrieveTU_NOTEByTUIDs>
		<retrieveTU_PROPByTUIDs>SELECT PROPTYPE, CONTENT FROM TU_PROP WHERE TUID IN (?)</retrieveTU_PROPByTUIDs>
		<removeTUVByTUIDs>DELETE FROM TUV WHERE TUID IN (?)</removeTUVByTUIDs>
		<removeTUByTUIDs>DELETE FROM TU WHERE TUID IN (?)</removeTUByTUIDs>
		<removeTU_PROPByTUIDs>DELETE FROM TU_PROP WHERE TUID IN (?)</removeTU_PROPByTUIDs>
		<removeTU_NOTEByTUIDs>DELETE FROM TU_NOTE WHERE TUID IN (?)</removeTU_NOTEByTUIDs>
		<removeMATRIXByTUIDs>DELETE FROM MATRIX___LANG__ WHERE TUID IN (?)</removeMATRIXByTUIDs>
	</dbtype>

	<!--
		Oracle 10g
	-->

	<dbtype name="Oracle" filebased="No" port="1521" instance="Yes">
		<driver>oracle.jdbc.driver.OracleDriver</driver>
		<url>jdbc:oracle:thin:@//__SERVER_NAME__:__PORT_NUMBER__/__INSTANCE__</url>
		<config-property>
			<property name="user">__USER__</property>
			<property name="password">__PASSWORD__</property>
		</config-property>
		<create-hssysdb></create-hssysdb>
		<create-hssystables>
			<step>CREATE TABLE HSDB7LIST (
				DBNAME VARCHAR(150) NOT NULL,
				QUALITY CHAR(1) NOT NULL,
				PRIMARY KEY (DBNAME)
				)</step>
		</create-hssystables>
		<insert-db>INSERT INTO HSDB7LIST (DBNAME,QUALITY) VALUES
			(?,?)</insert-db>
		<remove-db>DELETE FROM HSDB7LIST WHERE DBNAME=?</remove-db>
		<get-dblist>SELECT DBNAME, QUALITY FROM HSDB7LIST</get-dblist>
		<create-database></create-database>
		<create-tables>
			<step>CREATE TABLE __DATABASE_NAME___TU (
				TUID VARCHAR2(30) NOT NULL,
				CREATIONID VARCHAR2(30),
				CREATIONDATE DATE,
				CHANGEID VARCHAR2(30),
				CHANGEDATE DATE,
				CREATIONTOOL VARCHAR2(200),
				CREATIONTOOLVERSION VARCHAR2(200),
				PRIMARY KEY (TUID)
				)</step>
			<step>CREATE TABLE __DATABASE_NAME___TUV (
				TUID VARCHAR2(30) NOT NULL,
				LANG VARCHAR2(6) NOT NULL,
				SEG NCLOB NOT NULL,
				PURETEXT NCLOB NOT NULL,
				CLIENTID NCLOB,
				CREATIONID VARCHAR2(30),
				CREATIONDATE DATE,
				CHANGEID VARCHAR2(30),
				CHANGEDATE DATE,
				CREATIONTOOL VARCHAR2(200),
				CREATIONTOOLVERSION VARCHAR2(200),
				HASH INTEGER NOT NULL,
				TUVTEXT NCLOB,
				PREVIOUSHASH NCLOB,
				NEXTHASH NCLOB,
				PROJECTREF VARCHAR2(256),
				JOBREF VARCHAR2(256),
				PRIMARY KEY (TUID,LANG),
				FOREIGN KEY (TUID) REFERENCES __DATABASE_NAME___TU
				)</step>
			<step>CREATE INDEX I__DATABASE_NAME__TUVH ON __DATABASE_NAME___TUV(HASH)</step>
			<step>CREATE TABLE __DATABASE_NAME___TU_NOTE (
				TUID VARCHAR2(30) NOT NULL,
				NOTEID VARCHAR2(30) NOT NULL,
				CONTENT NCLOB,
				PRIMARY KEY (TUID, NOTEID)
				)</step>
			<step>CREATE TABLE __DATABASE_NAME___TU_PROP (
				TUID VARCHAR2(30) NOT NULL,
				PROPTYPE VARCHAR2(30) NOT NULL,
				CONTENT NCLOB,
				PRIMARY KEY (TUID, PROPTYPE)
				)</step>
			<step>CREATE TABLE __DATABASE_NAME___LANGS (
				LANG VARCHAR(6) NOT NULL,
				PRIMARY KEY (LANG)
			)</step>
		</create-tables>
		<drop-database></drop-database>
		<drop-tables>
			<drop-table>DROP TABLE __DATABASE_NAME___TU_PROP</drop-table>
			<drop-table>DROP TABLE __DATABASE_NAME___TU_NOTE</drop-table>
			<drop-table>DROP TABLE __DATABASE_NAME___TUV</drop-table>
			<drop-table>DROP TABLE __DATABASE_NAME___TU</drop-table>
			<drop-table>DROP TABLE __DATABASE_NAME___LANGS</drop-table>
		</drop-tables>
		<readLanguages>SELECT LANG FROM __DATABASE_NAME___LANGS</readLanguages>
		<createMatrix>CREATE TABLE __DATABASE_NAME___MATRIX___LANG__ (
			TUID VARCHAR(30) NOT NULL,
			NGRAM INTEGER NOT NULL,
			SEGSIZE INTEGER,
			PRIMARY KEY(TUID,NGRAM)
		)</createMatrix>
		<createIndex4Matrix>
			<step>CREATE INDEX I__DATABASE_NAME__M__LANG__SS ON __DATABASE_NAME___MATRIX___LANG__(SEGSIZE)</step>
		</createIndex4Matrix>
		<removeMatrixLang>DROP TABLE __DATABASE_NAME___MATRIX___LANG__</removeMatrixLang>
		<addLanguage>INSERT INTO __DATABASE_NAME___LANGS (LANG) VALUES (?)</addLanguage>
		<insertMATRIX>INSERT INTO __DATABASE_NAME___MATRIX___LANG__ (TUID, NGRAM, SEGSIZE) VALUES (?,?,?)</insertMATRIX>
		<searchTranslation>SELECT TUID FROM __DATABASE_NAME___TUV WHERE PURETEXT=? AND LANG=?</searchTranslation>
		<searchMATRIX>SELECT TUID FROM __DATABASE_NAME___MATRIX___LANG__ WHERE NGRAM IN (__SET__) AND SEGSIZE &gt;=? AND SEGSIZE&lt;=?</searchMATRIX>
		<freeSearch>SELECT TUID,NGRAM FROM __DATABASE_NAME___MATRIX___LANG__ WHERE NGRAM IN (__SET__)</freeSearch>
		<retrieveTUV>SELECT TUID, LANG, SEG, PURETEXT, CREATIONID, CREATIONDATE, CHANGEDATE, CREATIONTOOL, CREATIONTOOLVERSION, TUVTEXT FROM __DATABASE_NAME___TUV WHERE TUID=? AND LANG=?</retrieveTUV>
		<retrieveTUV_SEG>SELECT TUID, SEG FROM __DATABASE_NAME___TUV WHERE HASH=? AND LANG=?</retrieveTUV_SEG>
		<retrieveTUV_SEG_CONTEXT>SELECT TUID, SEG FROM TUV WHERE HASH=? AND LANG=? AND PREVIOUSHASH LIKE ? AND NEXTHASH LIKE ?</retrieveTUV_SEG_CONTEXT>
		<removeMATRIX>DELETE FROM __DATABASE_NAME___MATRIX___LANG__ WHERE TUID=?</removeMATRIX>
		<insertTU>INSERT INTO __DATABASE_NAME___TU (TUID, CREATIONID, CREATIONDATE, CHANGEID, CHANGEDATE, CREATIONTOOL, CREATIONTOOLVERSION) VALUES
			(?,?,?,?,?,?,?)</insertTU>
		<updateTU>UPDATE __DATABASE_NAME___TU SET CREATIONID=?,CREATIONDATE=?,CHANGEID=?,CHANGEDATE=?,CREATIONTOOL=?,CREATIONTOOLVERSION=? WHERE TUID=?</updateTU>
		<retrieveTU>SELECT TUID, CREATIONID, CREATIONDATE, CHANGEDATE,
			CREATIONTOOL, CREATIONTOOLVERSION FROM __DATABASE_NAME___TU WHERE
			TUID=?</retrieveTU>
		<insertTUV>INSERT INTO __DATABASE_NAME___TUV (TUID, LANG, SEG,
			PURETEXT, CLIENTID, CREATIONID, CREATIONDATE, CHANGEID, CHANGEDATE, CREATIONTOOL,
			CREATIONTOOLVERSION, HASH, TUVTEXT, PREVIOUSHASH, NEXTHASH, PROJECTREF, JOBREF) VALUES
			(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)</insertTUV>
		<removeTUV>DELETE FROM __DATABASE_NAME___TUV WHERE TUID=? AND LANG=?</removeTUV>
		<removeTU>DELETE FROM __DATABASE_NAME___TU WHERE TUID=?</removeTU>
		<removeTU_PROP>DELETE FROM __DATABASE_NAME___TU_PROP WHERE TUID=?</removeTU_PROP>
		<removeOneTU_PROP>DELETE FROM __DATABASE_NAME___TU_PROP WHERE TUID=? AND PROPTYPE=? AND CONTENT LIKE ?</removeOneTU_PROP>
		<removeTU_NOTE>DELETE FROM __DATABASE_NAME___TU_NOTE WHERE TUID=?</removeTU_NOTE>
		<insertTU_NOTE>INSERT INTO __DATABASE_NAME___TU_NOTE (TUID, NOTEID, CONTENT) VALUES (?,?,?)</insertTU_NOTE>
		<insertTU_PROP>INSERT INTO __DATABASE_NAME___TU_PROP (TUID, PROPTYPE, CONTENT) VALUES (?,?,?)</insertTU_PROP>
		<retrieveAllTU>SELECT TUID, CREATIONID, CREATIONDATE, CHANGEDATE, CREATIONTOOL, CREATIONTOOLVERSION FROM __DATABASE_NAME___TU</retrieveAllTU>
		<retrieveAllTUV>SELECT LANG, SEG, CREATIONID, CREATIONDATE, CHANGEDATE, CREATIONTOOL, CREATIONTOOLVERSION, TUVTEXT FROM __DATABASE_NAME___TUV WHERE TUID=?</retrieveAllTUV>
		<retrieveTU_NOTE>SELECT CONTENT FROM __DATABASE_NAME___TU_NOTE WHERE TUID=?</retrieveTU_NOTE>
		<retrieveTU_PROP>SELECT PROPTYPE, CONTENT FROM __DATABASE_NAME___TU_PROP WHERE TUID=?</retrieveTU_PROP>
		<getRegexMatchRowCount>SELECT COUNT(TUID) FROM	__DATABASE_NAME___TUV A WHERE LANG=? AND REGEXP_LIKE (?, ?)</getRegexMatchRowCount>
		<getRegexMatchRows2>SELECT * FROM (SELECT ATUID,ALANG,BLANG,ASEG,BSEG,APURETEXT,BPURETEXT,ACLIENTID,BCLIENTID,ACREATIONID,BCREATIONID,ACREATIONDATE,BCREATIONDATE,ACHANGEID,BCHANGEID,ACHANGEDATE,BCHANGEDATE,APROJECTREF,BPROJECTREF,AJOBREF,BJOBREF,ROWNUM R FROM
(SELECT A.TUID ATUID,A.LANG ALANG,B.LANG BLANG,A.SEG ASEG,B.SEG BSEG,A.PURETEXT APURETEXT,B.PURETEXT BPURETEXT,A.CLIENTID ACLIENTID,B.CLIENTID BCLIENTID,A.CREATIONID ACREATIONID,B.CREATIONID BCREATIONID,A.CREATIONDATE ACREATIONDATE,B.CREATIONDATE BCREATIONDATE,A.CHANGEID ACHANGEID,B.CHANGEID BCHANGEID,A.CHANGEDATE ACHANGEDATE,B.CHANGEDATE BCHANGEDATE,A.PROJECTREF APROJECTREF,B.PROJECTREF BPROJECTREF,A.JOBREF AJOBREF,B.JOBREF BJOBREF FROM __DATABASE_NAME___TUV A LEFT JOIN __DATABASE_NAME___TUV B ON A.TUID = B.TUID AND B.LANG=? WHERE REGEXP_LIKE(?,?) AND A.LANG=? ORDER BY __ORDERBY__))
WHERE R &gt;=? AND R &lt; ?</getRegexMatchRows2>
		<getRegexMatchRows3>SELECT * FROM (SELECT ATUID,ALANG,BLANG,CLANG,ASEG,BSEG,CSEG,APURETEXT,BPURETEXT,CPURETEXT,ACLIENTID,BCLIENTID,CCLIENTID,ACREATIONID,BCREATIONID,CCREATIONID,ACREATIONDATE,BCREATIONDATE,CCREATIONDATE,ACHANGEID,BCHANGEID,CCHANGEID,ACHANGEDATE,BCHANGEDATE,CCHANGEDATE,APROJECTREF,BPROJECTREF,CPROJECTREF,AJOBREF,BJOBREF,CJOBREF,ROWNUM R FROM
(SELECT A.TUID ATUID,A.LANG ALANG,B.LANG BLANG,C.LANG CLANG,A.SEG ASEG,B.SEG BSEG,C.SEG CSEG,A.PURETEXT APURETEXT,B.PURETEXT BPURETEXT,C.PURETEXT CPURETEXT,A.CLIENTID ACLIENTID,B.CLIENTID BCLIENTID,C.CLIENTID CCLIENTID,A.CREATIONID ACREATIONID,B.CREATIONID BCREATIONID,C.CREATIONID CCREATIONID,A.CREATIONDATE ACREATIONDATE,B.CREATIONDATE BCREATIONDATE,C.CREATIONDATE CCREATIONDATE,A.CHANGEID ACHANGEID,B.CHANGEID BCHANGEID,C.CHANGEID CCHANGEID,A.CHANGEDATE ACHANGEDATE,B.CHANGEDATE BCHANGEDATE,C.CHANGEDATE CCHANGEDATE,A.PROJECTREF APROJECTREF,B.PROJECTREF BPROJECTREF,C.PROJECTREF CPROJECTREF,A.JOBREF AJOBREF,B.JOBREF BJOBREF,C.JOBREF CJOBREF FROM __DATABASE_NAME___TUV A LEFT JOIN __DATABASE_NAME___TUV B ON A.TUID = B.TUID AND B.LANG=? LEFT JOIN __DATABASE_NAME___TUV C ON A.TUID = C.TUID AND C.LANG=? WHERE REGEXP_LIKE(?,?) AND A.LANG=? ORDER BY __ORDERBY__))
WHERE R &gt;=? AND R &lt; ?</getRegexMatchRows3>
		<getFuzzyMatchRowCount>SELECT COUNT(TUID) FROM __DATABASE_NAME___TUV A WHERE LANG=? AND (__CONDITION__)</getFuzzyMatchRowCount>
		<getFuzzyMatchRows2>SELECT * FROM (SELECT ATUID,ALANG,BLANG,ASEG,BSEG,APURETEXT,BPURETEXT,ACLIENTID,BCLIENTID,ACREATIONID,BCREATIONID,ACREATIONDATE,BCREATIONDATE,ACHANGEID,BCHANGEID,ACHANGEDATE,BCHANGEDATE,APROJECTREF,BPROJECTREF,AJOBREF,BJOBREF,ROWNUM R FROM
(SELECT A.TUID ATUID,A.LANG ALANG,B.LANG BLANG,A.SEG ASEG,B.SEG BSEG,A.PURETEXT APURETEXT,B.PURETEXT BPURETEXT,A.CLIENTID ACLIENTID,B.CLIENTID BCLIENTID,A.CREATIONID ACREATIONID,B.CREATIONID BCREATIONID,A.CREATIONDATE ACREATIONDATE,B.CREATIONDATE BCREATIONDATE,A.CHANGEID ACHANGEID,B.CHANGEID BCHANGEID,A.CHANGEDATE ACHANGEDATE,B.CHANGEDATE BCHANGEDATE,A.PROJECTREF APROJECTREF,B.PROJECTREF BPROJECTREF,A.JOBREF AJOBREF,B.JOBREF BJOBREF FROM __DATABASE_NAME___TUV A LEFT JOIN __DATABASE_NAME___TUV B ON A.TUID = B.TUID AND B.LANG=? WHERE A.LANG=?  AND (__CONDITION__) ORDER BY __ORDERBY__))
WHERE R &gt;=? AND R &lt; ?</getFuzzyMatchRows2>
		<getFuzzyMatchRows3>SELECT * FROM (SELECT ATUID,ALANG,BLANG,CLANG,ASEG,BSEG,CSEG,APURETEXT,BPURETEXT,CPURETEXT,ACLIENTID,BCLIENTID,CCLIENTID,ACREATIONID,BCREATIONID,CCREATIONID,ACREATIONDATE,BCREATIONDATE,CCREATIONDATE,ACHANGEID,BCHANGEID,CCHANGEID,ACHANGEDATE,BCHANGEDATE,CCHANGEDATE,APROJECTREF,BPROJECTREF,CPROJECTREF,AJOBREF,BJOBREF,CJOBREF,ROWNUM R FROM
(SELECT A.TUID ATUID,A.LANG ALANG,B.LANG BLANG,C.LANG CLANG,A.SEG ASEG,B.SEG BSEG,C.SEG CSEG,A.PURETEXT APURETEXT,B.PURETEXT BPURETEXT,C.PURETEXT CPURETEXT,A.CLIENTID ACLIENTID,B.CLIENTID BCLIENTID,C.CLIENTID CCLIENTID,A.CREATIONID ACREATIONID,B.CREATIONID BCREATIONID,C.CREATIONID CCREATIONID,A.CREATIONDATE ACREATIONDATE,B.CREATIONDATE BCREATIONDATE,C.CREATIONDATE CCREATIONDATE,A.CHANGEID ACHANGEID,B.CHANGEID BCHANGEID,C.CHANGEID CCHANGEID,A.CHANGEDATE ACHANGEDATE,B.CHANGEDATE BCHANGEDATE,C.CHANGEDATE CCHANGEDATE,A.PROJECTREF APROJECTREF,B.PROJECTREF BPROJECTREF,C.PROJECTREF CPROJECTREF,A.JOBREF AJOBREF,B.JOBREF BJOBREF,C.JOBREF CJOBREF FROM __DATABASE_NAME___TUV A LEFT JOIN __DATABASE_NAME___TUV B ON A.TUID = B.TUID AND B.LANG=? LEFT JOIN __DATABASE_NAME___TUV C ON A.TUID = C.TUID AND C.LANG=? WHERE A.LANG=?  AND (__CONDITION__) ORDER BY __ORDERBY__))
WHERE R &gt;=? AND R &lt; ?</getFuzzyMatchRows3>
		<getMatchTUV>SELECT LANG, SEG, PURETEXT, CREATIONID,
			CREATIONDATE, CHANGEID, CHANGEDATE, PREVIOUSHASH, NEXTHASH, PROJECTREF, JOBREF FROM
			__DATABASE_NAME___TUV WHERE TUID=? AND (LANG=? OR LANG=?)</getMatchTUV>
		<getMatchTUV4QT>SELECT LANG, SEG, PURETEXT FROM
			__DATABASE_NAME___TUV WHERE TUID=? AND (LANG=? OR LANG=?)</getMatchTUV4QT>
		<getAllLanguages>SELECT LANG FROM __DATABASE_NAME___TUV</getAllLanguages>
		<getProjects>SELECT CONTENT FROM __DATABASE_NAME___TU_PROP WHERE PROPTYPE='projectref'</getProjects>
		<getJobs>SELECT CONTENT FROM __DATABASE_NAME___TU_PROP WHERE PROPTYPE='jobref'</getJobs>
		<getJobDates>SELECT CONTENT FROM __DATABASE_NAME___TU_PROP WHERE PROPTYPE='jobdate'</getJobDates>
		<getOwners>SELECT CONTENT FROM __DATABASE_NAME___TU_PROP WHERE PROPTYPE='jobowner'</getOwners>
		<retrieveTUV_LIST>SELECT LANG FROM __DATABASE_NAME___TUV WHERE TUID=?</retrieveTUV_LIST>
		<getTerm>SELECT L.TUID,L.PURETEXT,R.PURETEXT FROM __DATABASE_NAME___TUV L LEFT JOIN __DATABASE_NAME___TUV R ON L.TUID=R.TUID AND R.LANG=? WHERE L.LANG=? AND INSTR(?,LOWER(L.PURETEXT)) &gt; 0 AND R.PURETEXT IS NOT NULL</getTerm>
		<getTUFlag>SELECT COUNT(*) FROM __DATABASE_NAME___TU_PROP WHERE TUID=? AND PROPTYPE='x-flag' AND CONTENT LIKE 'HS-Flag'</getTUFlag>
		<retrieveAllTUVByTUIDs>SELECT * FROM __DATABASE_NAME___TUV WHERE TUID IN (?)</retrieveAllTUVByTUIDs>
		<retrieveTU_NOTEByTUIDs>SELECT CONTENT FROM __DATABASE_NAME___TU_NOTE WHERE TUID IN (?)</retrieveTU_NOTEByTUIDs>
		<retrieveTU_PROPByTUIDs>SELECT PROPTYPE, CONTENT FROM __DATABASE_NAME___TU_PROP WHERE TUID IN (?)</retrieveTU_PROPByTUIDs>
		<removeTUVByTUIDs>DELETE FROM __DATABASE_NAME___TUV WHERE TUID IN (?)</removeTUVByTUIDs>
		<removeTUByTUIDs>DELETE FROM __DATABASE_NAME___TU WHERE TUID IN (?)</removeTUByTUIDs>
		<removeTU_PROPByTUIDs>DELETE FROM __DATABASE_NAME___TU_PROP WHERE TUID IN (?)</removeTU_PROPByTUIDs>
		<removeTU_NOTEByTUIDs>DELETE FROM __DATABASE_NAME___TU_NOTE WHERE TUID IN (?)</removeTU_NOTEByTUIDs>
		<removeMATRIXByTUIDs>DELETE FROM __DATABASE_NAME___MATRIX___LANG__ WHERE TUID IN (?)</removeMATRIXByTUIDs>
	</dbtype>

	<!--
		PostgreSQL
	-->

		<dbtype name="PostgreSQL" filebased="No" port="5432">
		<driver>org.postgresql.Driver</driver>
		<url>jdbc:postgresql://__SERVER_NAME__:__PORT_NUMBER__/__DATABASE_NAME__</url>
		<config-property>
			<property name="user">__USER__</property>
			<property name="password">__PASSWORD__</property>
			<property name="charSet">UTF-8</property>
		</config-property>
		<create-hssysdb>CREATE DATABASE __DATABASE_NAME__</create-hssysdb>
		<create-hssystables>
			<step>CREATE TABLE HSDB7LIST (
				DBNAME VARCHAR(150) NOT NULL,
				QUALITY CHAR(1) NOT NULL,
				PRIMARY KEY (DBNAME)
				)</step>
		</create-hssystables>
		<insert-db>INSERT INTO HSDB7LIST (DBNAME,QUALITY) VALUES (?,?)</insert-db>
		<remove-db>DELETE FROM HSDB7LIST WHERE DBNAME=?</remove-db>
		<get-dblist>SELECT DBNAME, QUALITY FROM HSDB7LIST</get-dblist>
		<create-database>CREATE DATABASE __DATABASE_NAME__</create-database>
		<create-tables>
			<step>CREATE TABLE TU (
				TUID VARCHAR(30) NOT NULL,
				CREATIONID VARCHAR(30),
				CREATIONDATE TIMESTAMP,
				CHANGEID VARCHAR(30),
				CHANGEDATE TIMESTAMP,
				CREATIONTOOL VARCHAR(200),
				CREATIONTOOLVERSION VARCHAR(200),
				PRIMARY KEY (TUID)
				);</step>
			<step>CREATE TABLE TUV (
				TUID VARCHAR(30) NOT NULL,
				LANG VARCHAR(6) NOT NULL,
				SEG TEXT NOT NULL,
				PURETEXT TEXT,
				CLIENTID TEXT,
				CREATIONID VARCHAR(30),
				CREATIONDATE TIMESTAMP,
				CHANGEID VARCHAR(30),
				CHANGEDATE TIMESTAMP,
				CREATIONTOOL VARCHAR(200),
				CREATIONTOOLVERSION VARCHAR(200),
				HASH INTEGER NOT NULL,
				TUVTEXT TEXT NOT NULL,
				PREVIOUSHASH TEXT,
				NEXTHASH TEXT,
				PROJECTREF VARCHAR(256),
				JOBREF VARCHAR(256),
				PRIMARY KEY (TUID,LANG),
				FOREIGN KEY (TUID) REFERENCES TU(TUID)
				);</step>
			<step>CREATE INDEX I_TUV_HASH ON TUV(HASH)</step>
			<step>CREATE TABLE TU_NOTE (
				TUID VARCHAR(30) NOT NULL,
				NOTEID VARCHAR(30) NOT NULL,
				CONTENT TEXT,
				PRIMARY KEY (tuid, NOTEID)
				);</step>
			<step>CREATE TABLE TU_PROP (
				TUID VARCHAR(30) NOT NULL,
				PROPTYPE VARCHAR(30) NOT NULL,
				CONTENT TEXT,
				PRIMARY KEY (TUID, PROPTYPE)
				);</step>
			<step>CREATE TABLE LANGS (
				LANG VARCHAR(6) NOT NULL
				);</step>
		</create-tables>
		<drop-tables>
			<drop-table>DROP TABLE TU_PROP</drop-table>
			<drop-table>DROP TABLE TU_NOTE</drop-table>
			<drop-table>DROP TABLE TUV</drop-table>
			<drop-table>DROP TABLE TU</drop-table>
			<drop-table>DROP TABLE LANGS</drop-table>
		</drop-tables>
		<readLanguages>SELECT LANG FROM LANGS</readLanguages>
		<createMatrix>CREATE TABLE MATRIX___LANG__ (
				TUID VARCHAR(30) NOT NULL,
				NGRAM INTEGER NOT NULL,
				SEGSIZE INTEGER,
				PRIMARY KEY (TUID,NGRAM)
				);</createMatrix>
		<createIndex4Matrix>
		<step>CREATE INDEX I_MATRIX___LANG___SEGSIZE ON MATRIX___LANG__(SEGSIZE)</step>
		</createIndex4Matrix>
		<removeMatrixLang>DROP TABLE MATRIX___LANG__</removeMatrixLang>
		<addLanguage>INSERT INTO LANGS (LANG) VALUES (?);</addLanguage>
		<drop-database>DROP DATABASE __DATABASE_NAME__</drop-database>
		<insertMATRIX>INSERT INTO MATRIX___LANG__ (TUID, NGRAM, SEGSIZE) VALUES	(?,?,?);</insertMATRIX>
		<searchMATRIX>SELECT TUID FROM MATRIX___LANG__ WHERE NGRAM IN (__SET__) AND SEGSIZE &gt;=? AND SEGSIZE&lt;=?</searchMATRIX>
		<searchTranslation>SELECT TUID FROM TUV WHERE PURETEXT=? AND LANG=?</searchTranslation>
		<freeSearch>SELECT TUID,NGRAM FROM MATRIX___LANG__ WHERE NGRAM IN (__SET__)</freeSearch>
		<retrieveTUV>SELECT TUID, LANG, SEG, PURETEXT, CREATIONID, CREATIONDATE, CHANGEDATE, CREATIONTOOL, CREATIONTOOLVERSION, TUVTEXT FROM TUV WHERE TUID=? AND LANG=?</retrieveTUV>
		<retrieveTUV_SEG>SELECT TUID, SEG FROM TUV WHERE HASH=? AND	LANG=?</retrieveTUV_SEG>
		<retrieveTUV_SEG_CONTEXT>SELECT TUID, SEG FROM TUV WHERE HASH=? AND LANG=? AND PREVIOUSHASH=? AND NEXTHASH=?</retrieveTUV_SEG_CONTEXT>
		<removeMATRIX>DELETE FROM MATRIX___LANG__ WHERE TUID=?</removeMATRIX>
		<insertTU>INSERT INTO TU (TUID, CREATIONID, CREATIONDATE, CHANGEID, CHANGEDATE, CREATIONTOOL, CREATIONTOOLVERSION) VALUES (?,?,?,?,?,?,?);</insertTU>
		<updateTU>UPDATE TU SET CREATIONID=?,CREATIONDATE=?,CHANGEID=?,CHANGEDATE=?,CREATIONTOOL=?,CREATIONTOOLVERSION=? WHERE TUID=?</updateTU>
		<retrieveTU>SELECT TUID, CREATIONID, CREATIONDATE, CHANGEDATE, CREATIONTOOL, CREATIONTOOLVERSION FROM TU WHERE TUID=?</retrieveTU>
		<insertTUV>INSERT INTO TUV (TUID, LANG, SEG, PURETEXT, CLIENTID, CREATIONID, CREATIONDATE, CHANGEID, CHANGEDATE, CREATIONTOOL, CREATIONTOOLVERSION, HASH,
			TUVTEXT, PREVIOUSHASH, NEXTHASH, PROJECTREF, JOBREF) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)</insertTUV>
		<removeTUV>DELETE FROM TUV WHERE TUID=? AND LANG=?</removeTUV>
		<removeTU>DELETE FROM TU WHERE TUID=?</removeTU>
		<removeTU_PROP>DELETE FROM TU_PROP WHERE TUID=?</removeTU_PROP>
		<removeOneTU_PROP>DELETE FROM TU_PROP WHERE TUID=? AND PROPTYPE=? AND CONTENT=?</removeOneTU_PROP>
		<removeTU_NOTE>DELETE FROM TU_NOTE WHERE TUID=?</removeTU_NOTE>
		<insertTU_NOTE>INSERT INTO TU_NOTE (TUID, NOTEID, CONTENT) VALUES (?,?,?)</insertTU_NOTE>
		<insertTU_PROP>INSERT INTO TU_PROP (TUID, PROPTYPE, CONTENT) VALUES	(?,?,?)</insertTU_PROP>
		<retrieveAllTU>SELECT TUID, CREATIONID, CREATIONDATE, CHANGEDATE, CREATIONTOOL, CREATIONTOOLVERSION FROM TU</retrieveAllTU>
		<retrieveAllTUV>SELECT LANG, SEG, CREATIONID, CREATIONDATE, CHANGEDATE,	CREATIONTOOL, CREATIONTOOLVERSION, TUVTEXT FROM TUV WHERE TUID=?</retrieveAllTUV>
		<retrieveTU_NOTE>SELECT CONTENT FROM TU_NOTE WHERE TUID=?</retrieveTU_NOTE>
		<retrieveTU_PROP>SELECT PROPTYPE, CONTENT FROM TU_PROP WHERE TUID=?</retrieveTU_PROP>
		<getRegexMatchRowCount>SELECT COUNT(1) FROM TUV A WHERE LANG=? AND ? ~ ?</getRegexMatchRowCount>
		<getRegexMatchRows2>SELECT A.TUID,A.LANG,B.LANG,A.SEG,B.SEG,A.PURETEXT,B.PURETEXT,A.CLIENTID,B.CLIENTID,A.CREATIONID,B.CREATIONID,A.CREATIONDATE,B.CREATIONDATE,A.CHANGEID,B.CHANGEID,A.CHANGEDATE,B.CHANGEDATE,A.PROJECTREF,B.PROJECTREF,A.JOBREF,B.JOBREF FROM TUV A LEFT JOIN TUV B ON A.TUID = B.TUID AND B.LANG=? WHERE ? ~ ? AND A.LANG=? ORDER BY __ORDERBY__ LIMIT ? OFFSET ? </getRegexMatchRows2>
		<getRegexMatchRows3>SELECT A.TUID,A.LANG,B.LANG,C.LANG,A.SEG,B.SEG,C.SEG,A.PURETEXT,B.PURETEXT,C.PURETEXT,A.CLIENTID,B.CLIENTID,C.CLIENTID,A.CREATIONID,B.CREATIONID,C.CREATIONID,A.CREATIONDATE,B.CREATIONDATE,C.CREATIONDATE,A.CHANGEID,B.CHANGEID,C.CHANGEID,A.CHANGEDATE,B.CHANGEDATE,C.CHANGEDATE,A.PROJECTREF,B.PROJECTREF,C.PROJECTREF,A.JOBREF,B.JOBREF,C.JOBREF FROM TUV A LEFT JOIN TUV B ON A.TUID = B.TUID AND B.LANG=? LEFT JOIN TUV C ON A.TUID = C.TUID AND C.LANG=? WHERE ? ~ ? AND A.LANG=? ORDER BY __ORDERBY__ LIMIT ? OFFSET ?</getRegexMatchRows3>
		<getFuzzyMatchRowCount>SELECT COUNT(1) FROM TUV A WHERE LANG=? AND (__CONDITION__)</getFuzzyMatchRowCount>
		<getFuzzyMatchRows2>SELECT A.TUID,A.LANG,B.LANG,A.SEG,B.SEG,A.PURETEXT,B.PURETEXT,A.CLIENTID,B.CLIENTID,A.CREATIONID,B.CREATIONID,A.CREATIONDATE,B.CREATIONDATE,A.CHANGEID,B.CHANGEID,A.CHANGEDATE,B.CHANGEDATE,A.PROJECTREF,B.PROJECTREF,A.JOBREF,B.JOBREF FROM TUV A LEFT JOIN TUV B ON A.TUID = B.TUID AND B.LANG=? WHERE A.LANG = ? AND ( __CONDITION__) ORDER BY __ORDERBY__ LIMIT ? OFFSET ?</getFuzzyMatchRows2>
		<getFuzzyMatchRows3>SELECT A.TUID,A.LANG,B.LANG,C.LANG,A.SEG,B.SEG,C.SEG,A.PURETEXT,B.PURETEXT,C.PURETEXT,A.CLIENTID,B.CLIENTID,C.CLIENTID,A.CREATIONID,B.CREATIONID,C.CREATIONID,A.CREATIONDATE,B.CREATIONDATE,C.CREATIONDATE,A.CHANGEID,B.CHANGEID,C.CHANGEID,A.CHANGEDATE,B.CHANGEDATE,C.CHANGEDATE,A.PROJECTREF,B.PROJECTREF,C.PROJECTREF,A.JOBREF,B.JOBREF,C.JOBREF FROM TUV A LEFT JOIN TUV B ON A.TUID = B.TUID AND B.LANG=? LEFT JOIN TUV C ON A.TUID = C.TUID AND C.LANG=? WHERE A.LANG=? AND ( __CONDITION__ ) ORDER BY __ORDERBY__ LIMIT ? OFFSET ?</getFuzzyMatchRows3>
		<getMatchTUV>SELECT LANG, SEG, PURETEXT, CREATIONID, CREATIONDATE, CHANGEID, CHANGEDATE, PREVIOUSHASH, NEXTHASH, PROJECTREF, JOBREF FROM TUV WHERE TUID=? AND (LANG=? OR LANG=?)</getMatchTUV>
		<getMatchTUV4QT>SELECT LANG, SEG, PURETEXT FROM	TUV WHERE TUID=? AND (LANG=? OR LANG=?)</getMatchTUV4QT>
		<getAllLanguages>SELECT DISTINCT LANG FROM TUV</getAllLanguages>
		<getProjects>SELECT DISTINCT CONTENT FROM TU_PROP WHERE	PROPTYPE='projectref' ORDER BY 1</getProjects>
		<getJobs>SELECT DISTINCT CONTENT FROM TU_PROP WHERE PROPTYPE='jobref' ORDER BY 1</getJobs>
		<getJobDates>SELECT DISTINCT CONTENT FROM TU_PROP WHERE PROPTYPE='jobdate' ORDER BY 1</getJobDates>
		<getOwners>SELECT DISTINCT CONTENT FROM TU_PROP WHERE PROPTYPE='jobowner' ORDER BY 1</getOwners>
		<retrieveTUV_LIST>SELECT LANG FROM TUV WHERE TUID=?</retrieveTUV_LIST>
		<getTerm>SELECT L.TUID,L.PURETEXT,R.PURETEXT FROM TUV L LEFT JOIN TUV R ON L.TUID=R.TUID AND R.LANG=? WHERE L.LANG=? AND POSITION(LOWER(L.PURETEXT) IN ?) &gt; 0 AND R.PURETEXT IS NOT NULL</getTerm>
		<getTUFlag>SELECT COUNT(*) FROM TU_PROP WHERE TUID=? AND PROPTYPE='x-flag' AND CONTENT='HS-Flag'</getTUFlag>
		<retrieveAllTUVByTUIDs>SELECT * FROM TUV WHERE TUID IN (?)</retrieveAllTUVByTUIDs>
		<retrieveTU_NOTEByTUIDs>SELECT CONTENT FROM TU_NOTE WHERE TUID IN (?)</retrieveTU_NOTEByTUIDs>
		<retrieveTU_PROPByTUIDs>SELECT PROPTYPE, CONTENT FROM TU_PROP WHERE TUID IN (?)</retrieveTU_PROPByTUIDs>
		<removeTUVByTUIDs>DELETE FROM TUV WHERE TUID IN (?)</removeTUVByTUIDs>
		<removeTUByTUIDs>DELETE FROM TU WHERE TUID IN (?)</removeTUByTUIDs>
		<removeTU_PROPByTUIDs>DELETE FROM TU_PROP WHERE TUID IN (?)</removeTU_PROPByTUIDs>
		<removeTU_NOTEByTUIDs>DELETE FROM TU_NOTE WHERE TUID IN (?)</removeTU_NOTEByTUIDs>
		<removeMATRIXByTUIDs>DELETE FROM MATRIX___LANG__ WHERE TUID IN (?)</removeMATRIXByTUIDs>
	</dbtype>

		<!--
			MS SQL SERVER 2000
		-->

	<dbtype name="MsSQL2000" filebased="No" port="1433" instance="yes">
		<driver>net.sourceforge.jtds.jdbc.Driver</driver>
		<url>jdbc:jtds:sqlserver://__SERVER_NAME__:__PORT_NUMBER__/__DATABASE_NAME__</url>
		<config-property>
			<property name="user">__USER__</property>
			<property name="password">__PASSWORD__</property>
			<property name="instance">__INSTANCE__</property>
		</config-property>
		<create-hssysdb>CREATE DATABASE __DATABASE_NAME__</create-hssysdb>
		<create-hssystables>
			<step>CREATE TABLE HSDB7LIST (
				DBNAME VARCHAR(150) NOT NULL,
				QUALITY CHAR(1) NOT NULL,
				PRIMARY KEY (DBNAME)
				)</step>
		</create-hssystables>
		<insert-db>INSERT INTO HSDB7LIST (DBNAME,QUALITY) VALUES (?,?)</insert-db>
		<remove-db>DELETE FROM HSDB7LIST WHERE DBNAME=?</remove-db>
		<get-dblist>SELECT DBNAME, QUALITY FROM HSDB7LIST</get-dblist>
		<create-database>CREATE DATABASE __DATABASE_NAME__</create-database>
		<create-tables>
			<step>CREATE TABLE TU (
				TUID VARCHAR(30) NOT NULL,
				CREATIONID NVARCHAR(30),
				CREATIONDATE DATETIME,
				CHANGEID NVARCHAR(30),
				CHANGEDATE DATETIME,
				CREATIONTOOL VARCHAR(200),
				CREATIONTOOLVERSION VARCHAR(200),
				PRIMARY KEY (TUID)
				);</step>
			<step>CREATE TABLE TUV (
				TUID VARCHAR(30) NOT NULL,
				LANG VARCHAR(6) NOT NULL,
				SEG NTEXT NOT NULL,
				PURETEXT NTEXT,
				CLIENTID NTEXT,
				CREATIONID NVARCHAR(30),
				CREATIONDATE DATETIME,
				CHANGEID NVARCHAR(30),
				CHANGEDATE DATETIME,
				CREATIONTOOL VARCHAR(200),
				CREATIONTOOLVERSION VARCHAR(200),
				HASH INTEGER NOT NULL,
				TUVTEXT NTEXT NOT NULL,
				PREVIOUSHASH TEXT,
				NEXTHASH TEXT,
				PROJECTREF VARCHAR(256),
				JOBREF VARCHAR(256),
				PRIMARY KEY (TUID,LANG),
				FOREIGN KEY (TUID) REFERENCES TU(TUID)
				);</step>
			<step>CREATE INDEX I_TUV_LANG ON TUV(LANG)</step>
			<step>CREATE INDEX I_TUV_HASH ON TUV(HASH)</step>
			<step>CREATE TABLE TU_NOTE (
				TUID VARCHAR(30) NOT NULL,
				NOTEID VARCHAR(30) NOT NULL,
				CONTENT NTEXT,
				PRIMARY KEY (tuid, NOTEID)
				);</step>
			<step>CREATE TABLE TU_PROP (
				TUID VARCHAR(30) NOT NULL,
				PROPTYPE VARCHAR(30) NOT NULL,
				CONTENT NTEXT,
				PRIMARY KEY (TUID, PROPTYPE)
				);</step>
			<step>CREATE TABLE LANGS (
				LANG VARCHAR(6) NOT NULL
				);</step>
		</create-tables>
		<drop-tables>
			<drop-table>DROP TABLE TU_PROP</drop-table>
			<drop-table>DROP TABLE TU_NOTE</drop-table>
			<drop-table>DROP TABLE TUV</drop-table>
			<drop-table>DROP TABLE TU</drop-table>
			<drop-table>DROP TABLE LANGS</drop-table>
		</drop-tables>
		<readLanguages>SELECT LANG FROM LANGS</readLanguages>
		<createMatrix>CREATE TABLE MATRIX___LANG__ (
				TUID VARCHAR(30) NOT NULL,
				NGRAM INTEGER NOT NULL,
				SEGSIZE INTEGER,
				PRIMARY KEY (TUID,NGRAM)
				);</createMatrix>
		<createIndex4Matrix>
			<step>CREATE INDEX I_MATRIX___LANG___SEGSIZE ON MATRIX___LANG__(SEGSIZE)</step>
			<step>CREATE INDEX I_MATRIX___LANG___NGRAMSEGSIZE ON MATRIX___LANG__(NGRAM,SEGSIZE)</step>
		</createIndex4Matrix>
		<removeMatrixLang>DROP TABLE MATRIX___LANG__</removeMatrixLang>
		<addLanguage>INSERT INTO LANGS (LANG) VALUES (?);</addLanguage>
		<drop-database>DROP DATABASE __DATABASE_NAME__</drop-database>
		<insertMATRIX>INSERT INTO MATRIX___LANG__ (TUID, NGRAM, SEGSIZE) VALUES
			(?,?,?);</insertMATRIX>
		<searchMATRIX>SELECT TUID FROM MATRIX___LANG__ WHERE SEGSIZE &gt;=? AND SEGSIZE&lt;=? AND NGRAM IN (__SET__)</searchMATRIX>
		<searchTranslation>SELECT TUID FROM TUV WHERE PURETEXT=? AND LANG=?</searchTranslation>
		<freeSearch>SELECT TUID,NGRAM FROM MATRIX___LANG__ WHERE NGRAM IN (__SET__)</freeSearch>
		<retrieveTUV>SELECT TUID, LANG, SEG, PURETEXT, CREATIONID,
			CREATIONDATE, CHANGEDATE, CREATIONTOOL, CREATIONTOOLVERSION, TUVTEXT FROM
			TUV WHERE TUID=? AND LANG=?</retrieveTUV>
		<retrieveTUV_SEG>SELECT TUID, SEG FROM TUV WHERE HASH=? AND	LANG=?</retrieveTUV_SEG>
		<retrieveTUV_SEG_CONTEXT>SELECT TUID, SEG FROM TUV WHERE HASH=? AND LANG=? AND PREVIOUSHASH LIKE ? AND NEXTHASH LIKE ?</retrieveTUV_SEG_CONTEXT>
		<removeMATRIX>DELETE FROM MATRIX___LANG__ WHERE TUID=?</removeMATRIX>
		<insertTU>INSERT INTO TU (TUID, CREATIONID, CREATIONDATE, CHANGEID, CHANGEDATE,
			CREATIONTOOL, CREATIONTOOLVERSION) VALUES (?,?,?,?,?,?,?);</insertTU>
		<updateTU>UPDATE TU SET CREATIONID=?,CREATIONDATE=?,CHANGEID=?,CHANGEDATE=?,CREATIONTOOL=?,CREATIONTOOLVERSION=? WHERE TUID=?</updateTU>
		<retrieveTU>SELECT TUID, CREATIONID, CREATIONDATE, CHANGEDATE,
			CREATIONTOOL, CREATIONTOOLVERSION FROM TU WHERE TUID=?</retrieveTU>
		<insertTUV>INSERT INTO TUV (TUID, LANG, SEG, PURETEXT, CLIENTID, CREATIONID,
			CREATIONDATE, CHANGEID, CHANGEDATE, CREATIONTOOL, CREATIONTOOLVERSION, HASH,
			TUVTEXT, PREVIOUSHASH, NEXTHASH, PROJECTREF, JOBREF) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)</insertTUV>
		<removeTUV>DELETE FROM TUV WHERE TUID=? AND LANG=?</removeTUV>
		<removeTU>DELETE FROM TU WHERE TUID=?</removeTU>
		<removeTU_PROP>DELETE FROM TU_PROP WHERE TUID=?</removeTU_PROP>
		<removeOneTU_PROP>DELETE FROM TU_PROP WHERE TUID=? AND PROPTYPE=? AND CONTENT LIKE ?</removeOneTU_PROP>
		<removeTU_NOTE>DELETE FROM TU_NOTE WHERE TUID=?</removeTU_NOTE>
		<insertTU_NOTE>INSERT INTO TU_NOTE (TUID, NOTEID, CONTENT) VALUES (?,?,?)</insertTU_NOTE>
		<insertTU_PROP>INSERT INTO TU_PROP (TUID, PROPTYPE, CONTENT) VALUES (?,?,?)</insertTU_PROP>
		<retrieveAllTU>SELECT TUID, CREATIONID, CREATIONDATE, CHANGEDATE, CREATIONTOOL, CREATIONTOOLVERSION FROM TU</retrieveAllTU>
		<retrieveAllTUV>SELECT LANG, SEG, CREATIONID, CREATIONDATE, CHANGEDATE, CREATIONTOOL, CREATIONTOOLVERSION, TUVTEXT FROM TUV WHERE TUID=?</retrieveAllTUV>
		<retrieveTU_NOTE>SELECT CONTENT FROM TU_NOTE WHERE TUID=?</retrieveTU_NOTE>
		<retrieveTU_PROP>SELECT PROPTYPE, CONTENT FROM TU_PROP WHERE TUID=?</retrieveTU_PROP>
		<getMatchTUV>SELECT LANG, SEG, PURETEXT, CREATIONID,
			CREATIONDATE, CHANGEID, CHANGEDATE, PREVIOUSHASH, NEXTHASH, PROJECTREF, JOBREF FROM
			TUV WHERE TUID=? AND (LANG=? OR LANG=?)</getMatchTUV>
		<getMatchTUV4QT>SELECT LANG, SEG, PURETEXT FROM TUV WHERE TUID=? AND (LANG=? OR LANG=?)</getMatchTUV4QT>
		<getAllLanguages>SELECT LANG FROM TUV</getAllLanguages>
		<getProjects>SELECT CONTENT FROM TU_PROP WHERE PROPTYPE='projectref'</getProjects>
		<getJobs>SELECT CONTENT FROM TU_PROP WHERE PROPTYPE='jobref'</getJobs>
		<getJobDates>SELECT CONTENT FROM TU_PROP WHERE PROPTYPE='jobdate'</getJobDates>
		<getOwners>SELECT CONTENT FROM TU_PROP WHERE PROPTYPE='jobowner'</getOwners>
		<retrieveTUV_LIST>SELECT LANG FROM TUV WHERE TUID=?</retrieveTUV_LIST>
		<searchTuvWReg>SELECT TUID,PURETEXT FROM TUV WHERE LANG=?</searchTuvWReg>
		<getRegexMatchRows2>SELECT A.TUID,A.LANG,B.LANG,A.SEG,B.SEG,A.PURETEXT,B.PURETEXT,A.CLIENTID,B.CLIENTID,A.CREATIONID,B.CREATIONID,A.CREATIONDATE,B.CREATIONDATE,A.CHANGEID,B.CHANGEID,A.CHANGEDATE,B.CHANGEDATE,A.PROJECTREF,B.PROJECTREF,A.JOBREF,B.JOBREF FROM TUV A LEFT JOIN TUV B ON A.TUID = B.TUID AND B.LANG=? WHERE A.TUID=? AND A.LANG=? ORDER BY __ORDERBY__</getRegexMatchRows2>
		<getRegexMatchRows3>SELECT A.TUID,A.LANG,B.LANG,C.LANG,A.SEG,B.SEG,C.SEG,A.PURETEXT,B.PURETEXT,C.PURETEXT,A.CLIENTID,B.CLIENTID,C.CLIENTID,A.CREATIONID,B.CREATIONID,C.CREATIONID,A.CREATIONDATE,B.CREATIONDATE,C.CREATIONDATE,A.CHANGEID,B.CHANGEID,C.CHANGEID,A.CHANGEDATE,B.CHANGEDATE,C.CHANGEDATE,A.PROJECTREF,B.PROJECTREF,C.PROJECTREF,A.JOBREF,B.JOBREF,C.JOBREF FROM TUV A LEFT JOIN TUV B ON A.TUID = B.TUID AND B.LANG=? LEFT JOIN TUV C ON A.TUID = C.TUID AND C.LANG=? WHERE A.TUID=? AND A.LANG=? ORDER BY __ORDERBY__</getRegexMatchRows3>
		<getFuzzyMatchRowCount>SELECT COUNT(1) FROM TUV A WHERE LANG=? AND (__CONDITION__)</getFuzzyMatchRowCount>
		<getFuzzyMatchRows2>SELECT * FROM (SELECT TOP __TOP1__ * FROM (SELECT TOP __TOP2__ A.TUID AS ATUID, A.LANG AS ALANG, B.LANG AS BLANG,A.SEG AS ASEG, B.SEG AS BSEG, A.PURETEXT AS APURETEXT,B.PURETEXT AS BPURETEXT, A.CLIENTID AS ACLIENTID,B.CLIENTID AS BCLIENTID, A.CREATIONID AS ACREATIONID,B.CREATIONID AS BCREATIONID,A.CREATIONDATE AS ACREATIONDATE,B.CREATIONDATE AS BCREATIONDATE, A.CHANGEID AS ACHANGEID,B.CHANGEID AS BCHANGEID, A.CHANGEDATE AS ACHANGEDATE,B.CHANGEDATE AS BCHANGEDATE,A.PROJECTREF AS APROJECTREF,B.PROJECTREF AS BPROJECTREF, A.JOBREF AS AJOBREF,B.JOBREF AS BJOBREF FROM TUV A LEFT OUTER JOIN TUV B ON A.TUID = B.TUID AND B.LANG = '__LANG1__' WHERE (A.LANG = '__LANG__') AND ( __CONDITION__ ) ORDER BY __ORDERBY1__ ) DERIVEDTBL ORDER BY __ORDERBY2__ ) DERIVEDTBL ORDER BY __ORDERBY1__ </getFuzzyMatchRows2>
		<getFuzzyMatchRows3>SELECT * FROM (SELECT TOP __TOP1__ * FROM (SELECT TOP __TOP2__ A.TUID AS ATUID, A.LANG AS ALANG, B.LANG AS BLANG,C.LANG AS CLANG,A.SEG ASEG,B.SEG BSEG,C.SEG CSEG,A.PURETEXT APURETEXT,B.PURETEXT BPURETEXT,C.PURETEXT CPURETEXT,A.CLIENTID ACLIENTID,B.CLIENTID BCLIENTID,C.CLIENTID CCLIENTID,A.CREATIONID ACREATIONID,B.CREATIONID BCREATIONID,C.CREATIONID CCREATIONID,A.CREATIONDATE ACREATIONDATE,B.CREATIONDATE BCREATIONDATE,C.CREATIONDATE CCREATIONDATE,A.CHANGEID ACHANGEID,B.CHANGEID BCHANGEID,C.CHANGEID CCHANGEID,A.CHANGEDATE ACHANGEDATE,B.CHANGEDATE BCHANGEDATE,C.CHANGEDATE CCHANGEDATE,A.PROJECTREF APROJECTREF,B.PROJECTREF BPROJECTREF,C.PROJECTREF CPROJECTREF,A.JOBREF AJOBREF,B.JOBREF BJOBREF,C.JOBREF CJOBREF FROM TUV A LEFT OUTER JOIN TUV B ON A.TUID = B.TUID AND B.LANG = '__LANG1__'  LEFT OUTER JOIN TUV C ON A.TUID = C.TUID AND C.LANG = '__LANG2__' WHERE (A.LANG = '__LANG__') AND ( __CONDITION__ ) ORDER BY __ORDERBY1__ ) DERIVEDTBL ORDER BY __ORDERBY2__ ) DERIVEDTBL ORDER BY __ORDERBY1__ </getFuzzyMatchRows3>
		<getTerm>SELECT L.TUID,L.PURETEXT,R.PURETEXT FROM TUV L LEFT JOIN TUV R ON L.TUID = R.TUID AND R.LANG=? WHERE L.LANG=? AND PATINDEX(STUFF('%%',2,0,CAST(L.PURETEXT AS NVARCHAR(4000))),?) &gt; 0 AND R.PURETEXT IS NOT NULL</getTerm>
		<getTUFlag>SELECT COUNT(*) FROM TU_PROP WHERE TUID=? AND PROPTYPE='x-flag' AND CONTENT LIKE 'HS-Flag'</getTUFlag>
		<retrieveAllTUVByTUIDs>SELECT * FROM TUV WHERE TUID IN (?)</retrieveAllTUVByTUIDs>
		<retrieveTU_NOTEByTUIDs>SELECT CONTENT FROM TU_NOTE WHERE TUID IN (?)</retrieveTU_NOTEByTUIDs>
		<retrieveTU_PROPByTUIDs>SELECT PROPTYPE, CONTENT FROM TU_PROP WHERE TUID IN (?)</retrieveTU_PROPByTUIDs>
		<removeTUVByTUIDs>DELETE FROM TUV WHERE TUID IN (?)</removeTUVByTUIDs>
		<removeTUByTUIDs>DELETE FROM TU WHERE TUID IN (?)</removeTUByTUIDs>
		<removeTU_PROPByTUIDs>DELETE FROM TU_PROP WHERE TUID IN (?)</removeTU_PROPByTUIDs>
		<removeTU_NOTEByTUIDs>DELETE FROM TU_NOTE WHERE TUID IN (?)</removeTU_NOTEByTUIDs>
		<removeMATRIXByTUIDs>DELETE FROM MATRIX___LANG__ WHERE TUID IN (?)</removeMATRIXByTUIDs>
	</dbtype>
</dbtypes>
