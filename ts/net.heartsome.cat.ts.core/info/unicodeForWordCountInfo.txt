//　备注：此文件夹 info 没有特殊的打包意义//　此文件是在处理字数统计时，做的一个侧重点为亚洲语系所有字符的一个unicode 汇总。此文件的方法应用于　CountWord.java.//　内部所记录信息，若未研究或者不了解，请勿修改。//　robert	2013-05-29	一、首先了解字数统计的核心思想。由于语系众多，针对不同语言的文字要有不同的算法。此处，收集所有亚洲语系(亚洲语系相对较好。更好排除)，亚洲语系分为五大类，即中文 zh，　日文 ja，　　朝鲜 Korean，　　泰语 Thai，　希伯来语(犹太语) Hebrew；通过识别这五大语系的　unicode，其他皆为欧洲语系。方便计算。		二、其实，unicode 编码的格式我就不详述，通过　java 方式将　unicode 编码转换成字符串或都　int 型，方便测试以及扩展。	System.out.println((int)'\u3130');	// 转换成 int 型	System.out.println("\u4e00");	//　即打印出这个　unicode 代表的字体，这里打印的是中文的　"一";	System.out.println(Integer.toHexString('一'));	//　这里就是将一个汉字以　unicode 编码的方式输出。	三、下面进入主题，列举出所有亚洲语系的　unicode 区间段，只针对　utf-8　的情况。		1、中文的unicode 编码区\u4e00(19968)-\u9fa5(40869)?\u9FBF(40895)	// 这里有点小争议，但采用　\u9FBF　结尾较好。	2、日文的unicode 编码区平假名 (Hiragana)   \u3040(12352)-\u309F(12447)片假名 (Katakana)   \u30A0(12448)-\u30FF(12543)片假名语音扩展   \u31F0(12784)-\u31FF(12799)其他文字为中文，已经包括在中文中啦。	备注：综上所述，日文（除中文汉字以外）的区间为 	\u3040(12352) - \u30FF(12543)，以及 \u31F0(12784)-\u31FF(12799)		3、朝鲜文\u1100(4352)-\u11FF(4607)：朝鲜文 (Hangul Jamo)\u3130(12592)-\u318F(12687)：朝鲜文兼容字母 (Hangul Compatibility Jamo)\uAC00(44032)-\uD7AF(55215)：朝鲜文音节 (Hangul Syllables)	4、泰文\u0E00(3584)-\u0E7F(3711)：泰文 (Thai)	5、希伯来语(犹太语) Hebrew\u0590-\u05FF：希伯来文 (Hebrew)	6、全角标点	\u2014(8212)-\u2026(8230)	\u3001(12289)-\u3011(12305)	\uff00(65280)-\uffe5(65509)	* = 42	//　这其实是半角	- = 45	//　实虚线不算字数	— = 8212		‘ = 8216	’ = 8217	” = 8221	… = 8230		、 = 12289	。 = 12290	《 = 12298	》 = 12299	【 = 12304		！ = 65281	＃ = 65283	％ = 65285	＆ = 65286	（ = 65288	） = 65289	＋ = 65291	， = 65292	： = 65306	； = 65307	＝ = 65309	？ = 65311	＠ = 65312	［ = 65339	｛ = 65371	｜ = 65372	｝ = 65373	￥ = 65509			四、备注信息	若所有标点不计算字数，可按下面正则表达式。	String exceptCharsRegex = "[-，。、；‘【［、＝《》？：”｛｝｜！＠＃￥％……＆*（）＋,./;'\\[\\]\\\\=<>?:\"{}|!@#$%^&*()_+]+"; //$NON-NLS-1$