package net.heartsome.cat.ts.ui.docx;import java.io.File;import java.text.MessageFormat;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;import java.util.Map.Entry;import net.heartsome.cat.common.util.TextUtil;import net.heartsome.cat.ts.ui.docx.common.CommentBean;import net.heartsome.cat.ts.ui.docx.common.DocxCommonFuction;import net.heartsome.cat.ts.ui.docx.common.DocxConstant;import net.heartsome.cat.ts.ui.docx.common.TUBean;import net.heartsome.cat.ts.ui.docx.common.TagBean;import net.heartsome.cat.ts.ui.docx.common.ZipUtil;import net.heartsome.cat.ts.ui.docx.resource.Messages;import net.heartsome.xml.vtdimpl.VTDUtils;import org.eclipse.core.runtime.FileLocator;import org.eclipse.core.runtime.IProgressMonitor;import org.eclipse.core.runtime.Platform;import org.eclipse.jface.dialogs.MessageDialog;import org.eclipse.swt.widgets.Display;import org.eclipse.swt.widgets.Shell;import org.osgi.framework.Bundle;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import com.ximpleware.AutoPilot;import com.ximpleware.VTDGen;import com.ximpleware.VTDNav;import com.ximpleware.XMLModifier;/** * 导出　docx 文档的主体类 * 备注：里面的　word xml 代码最好不要乱改，因为我也看不太懂。 * @author robert	2013-05-13 */public class ExportDocx {	private int workInterval = 1;	/** 一个标记，就是一个带有提示的超链接，这个　id 是指　<w:hyperlink r:id="rId5" ...> */	private static final String tagRId = "ridTag";	private static final String templeDocx = "temple/temple.docx"; 	private static final String tagColor = "7F7F7F";		private String srcLang;	private String tgtLang;	private String docxPath;	private Shell shell;	private boolean exportComment;	private boolean exportStatus;		private static String documentXmlPath = "";	private String tempFolder;	private static String docxFolderPath;		private VTDNav vn;	private AutoPilot ap;	private XMLModifier xm;		private static final int columnSUM = 14743;	private static final int FIRST_column_width = 851;	// 851	private int SECOND_column_width = 0;	private int THRID_column_width = 0;	private int FORTH_column_width = 0;	private int FIFTH_column_width = 0;	private static final String FONTSTR = "<w:rFonts w:ascii=\"Arial Unicode MS\" w:eastAsia=\"Arial Unicode MS\""			+ " w:hAnsi=\"Arial Unicode MS\" w:cs=\"Arial Unicode MS\" />";		private static final Logger LOGGER = LoggerFactory.getLogger(ExportDocx.class.getName());		public ExportDocx(){	}		public ExportDocx(String srcLang, String tgtLang, String docxPath, Shell shell, boolean exportComment, boolean exportStatus){		this.srcLang = srcLang;		this.tgtLang = tgtLang;		this.docxPath = docxPath;		this.shell = shell;		this.exportComment = exportComment;		this.exportStatus = exportStatus;				initColumnWidth();	}		/**	 * 设置每列的宽度	 * <div style='color:red'>下面的宽度请谨慎修改</div>	 */	private void initColumnWidth(){		if (exportComment) {			FORTH_column_width = 2268;		}		if (exportStatus) {			FIFTH_column_width = 1418;		}		SECOND_column_width = (columnSUM - FIRST_column_width - FORTH_column_width - FIFTH_column_width) / 2;		THRID_column_width = SECOND_column_width;	}		/**	 * 输出文本到　docx 文档	 * UNDO 未处理多个　file 节点的情况	 * UNDO 未处理文本中有换行的情况	 * @param srcLang	 * @param tgtLang	 * @param tuDataList	 * @throws Exception	 */	public boolean output(List<TUBean> tuDataList, IProgressMonitor subMonitor){		if (tuDataList.size() > 500) {			workInterval = tuDataList.size() / 500;		}		int totalWork = tuDataList.size() % workInterval == 0 ? (tuDataList.size() / workInterval) : (tuDataList.size() / workInterval) + 1;		subMonitor.beginTask("", totalWork);				try {    		Bundle bundle = Platform.getBundle(Activator.PLUGIN_ID);    		String templeDocxLC = FileLocator.toFileURL(bundle.getEntry(templeDocx)).getPath();			if (!new File(templeDocxLC).exists()) {				Display.getDefault().syncExec(new Runnable() {					@Override					public void run() {						MessageDialog.openWarning(shell, Messages.getString("all.dialog.warning"), 								Messages.getString("ExportDocx.logger.templeDocxNotExsit"));					}				});				LOGGER.error(Messages.getString("ExportDocx.logger.templeDocxNotExsit"));				return false;			}						tempFolder = System.getProperty("java.io.tmpdir")					+ System.getProperty("file.separator") + new File(templeDocxLC).getName();			docxFolderPath = ZipUtil.upZipFile(templeDocxLC, tempFolder);			documentXmlPath = docxFolderPath + File.separator + "word" + File.separator + "document.xml";						VTDGen vg = new VTDGen();			boolean parseResult = vg.parseFile(documentXmlPath, true);			if (!parseResult) {				Display.getDefault().syncExec(new Runnable() {					@Override					public void run() {						MessageDialog.openWarning(shell, Messages.getString("all.dialog.warning"), 								MessageFormat.format(Messages.getString("ExportDocx.logger.templeDocxParseError"), documentXmlPath));					}				});				LOGGER.error(MessageFormat.format(Messages.getString("ExportDocx.logger.templeDocxParseError"), documentXmlPath));				return false;			}						addTagRIdToRels();						vn = vg.getNav();			ap = new AutoPilot(vn);			ap.declareXPathNameSpace("w", "http://schemas.openxmlformats.org/wordprocessingml/2006/main");			xm = new XMLModifier(vn);			ap.selectXPath("/w:document/w:body");			if (ap.evalXPath() != -1) {				xm.insertBeforeTail(createTableContent());			}			xm.output(documentXmlPath);						vg = new VTDGen();			parseResult = vg.parseFile(documentXmlPath, true);			if (!parseResult) {				Display.getDefault().syncExec(new Runnable() {					@Override					public void run() {						MessageDialog.openWarning(shell, Messages.getString("all.dialog.warning"), 								MessageFormat.format(Messages.getString("ExportDocx.logger.templeDocxParseError"), documentXmlPath));					}				});				LOGGER.error(MessageFormat.format(Messages.getString("ExportDocx.logger.templeDocxParseError"), documentXmlPath));				return false;			}			vn = vg.getNav();			ap = new AutoPilot(vn);			ap.declareXPathNameSpace("w", "http://schemas.openxmlformats.org/wordprocessingml/2006/main");			xm = new XMLModifier(vn);						addTUToTable(tuDataList, subMonitor);			xm.output(documentXmlPath);			ZipUtil.zipFolder(docxPath, tempFolder);		} catch (Exception e) {			LOGGER.error("export MS WORD error", e);		}finally{			if (new File(docxFolderPath).exists()) {				deleteFileOrFolder(new File(docxFolderPath));			}		}		return true;	}		/**	 * 将每个 tu 添加到　表格	 */	private void addTUToTable(List<TUBean> tuDataList, IProgressMonitor subMonitor) throws Exception{		int index = 0;		StringBuffer rowSB = new StringBuffer();		for(TUBean bean : tuDataList){			index ++;			rowSB.append(createRow(bean));						// 一千个文本段保存一次，以提高导出速度			if (index % 1000 == 0) {				ap.selectXPath("/w:document/w:body/w:tbl");				if (ap.evalXPath() != -1) {					xm.insertBeforeTail(rowSB.toString());					xm.output(documentXmlPath);										VTDGen vg = new VTDGen();					boolean parseResult = vg.parseFile(documentXmlPath, true);					if (!parseResult) {						throw new Exception(MessageFormat.format(Messages.getString("ExportDocx.LOGGER.parseError1"), documentXmlPath));					}					vn = vg.getNav();					ap.bind(vn);					xm.bind(vn);					rowSB = new StringBuffer();				}			}			DocxCommonFuction.monitorWork(subMonitor, index, workInterval, false);		}		if (rowSB.length() > 0) {			ap.selectXPath("/w:document/w:body/w:tbl");			if (ap.evalXPath() != -1) {				xm.insertBeforeTail(rowSB.toString());				rowSB = new StringBuffer();			}		}		DocxCommonFuction.monitorWork(subMonitor, index, workInterval, false);	}		/**	 * 处理标记，将　<g>　与　<ph> 等将记换成　docx 支持的标记形式，以及将所有文本段处理成　r 节点形式	 * 该方法与 {@link #getTagFromSrcText} 类似	 * @return	 */	public String ananysisTextWithTag(String text){		StringBuffer rNodeStrSB = new StringBuffer();		// this is <g id='1'/>a</g><ph>this is a phTag</ph> test		// 先不管是什么标记，按照　xml 的标记，把文本段中的节点提取出来。		int index = text.indexOf("<");		Map<Integer, TagBean> tagMap = new LinkedHashMap<Integer, TagBean>();		int tagType = -1;		while (index != -1) {			int endIndex = text.length();			int end_1 = text.indexOf(">", index + 1);			int end_2 = text.indexOf("\\>", index + 1);			endIndex = end_1 != -1 ? (endIndex < end_1 ? endIndex : end_1) : endIndex;			endIndex = end_2 != -1 ? (endIndex < end_2 ? endIndex : end_2) : endIndex;			String tagText = text.substring(index, endIndex + 1);						tagType = DocxCommonFuction.getTagType(tagText);						tagMap.put(index, new TagBean(index, endIndex, tagType, tagText));			index = text.indexOf("<", index + 1);		}				// 开始处理　<ph> 标记的特殊情况		TagBean bean = null;		Integer[] keyArray = tagMap.keySet().toArray(new Integer[]{});		int key = -1;		for (int i = 0; i < keyArray.length; i++) {			key = keyArray[i];			bean = tagMap.get(key);			if (bean.getText().indexOf("<ph") != -1 && bean.getTagType() == DocxConstant.PAIRSTAR) {				int start = bean.getStartIndex();				int end = bean.getEndIndex();								int nextPhEndTagIdx = i + 1;				while(nextPhEndTagIdx <= keyArray.length){					TagBean nextBean = tagMap.get(keyArray[nextPhEndTagIdx]);					tagMap.remove(keyArray[nextPhEndTagIdx]);					if (nextBean.getText().indexOf("</ph") != -1) {						int nextEnd = nextBean.getEndIndex();						end = nextEnd;						String newText = text.substring(start, end + 1);						bean.setTagType(DocxConstant.NOTPAIR);						bean.setEndIndex(end);						bean.setText(newText);						i = nextPhEndTagIdx;						break;					}					nextPhEndTagIdx ++;				}			}		}				// 开始将标记与文本段进行拼装	►　◇ ◄		int textStart = 0;		bean = null;		for (Entry<Integer, TagBean> entry : tagMap.entrySet()) {//			这是测试用代码//			bean = entry.getValue();//			int tagStart = bean.getStartIndex();//			tagSB.append(text.substring(textStart, tagStart));//			//			tagSB.append("(");//			if (bean.getTagType() == DocxConstant.PAIRSTAR) {//				tagSB.append("►");//			}else if (bean.getTagType() == DocxConstant.PAIREND) {//				tagSB.append("◄");//			}else {//				tagSB.append("◇");//			}//			tagSB.append(bean.getText() + ")");//			textStart = bean.getEndIndex() + 1;						bean = entry.getValue();			int tagStart = bean.getStartIndex();			rNodeStrSB.append(createRNode(text.substring(textStart, tagStart), true, null));						if (bean.getTagType() == DocxConstant.PAIRSTAR) {				rNodeStrSB.append(createStartTag(bean.getText()));			}else if (bean.getTagType() == DocxConstant.PAIREND) {				rNodeStrSB.append(createEndTag(bean.getText()));			}else {				rNodeStrSB.append(createNotPairTag(bean.getText()));			}			textStart = bean.getEndIndex() + 1;		}		rNodeStrSB.append(createRNode(text.substring(textStart, text.length()), true, null));				return rNodeStrSB.toString();	}	public static void main(String[] args) {////		String text = "this is <g id='1'>a</g><ph>this is a phTag</ph> test<x id='17'/>";//		String text = "<sub>??? </sub>this is <g id='1'>a</g><ph>this is a phTag</ph> test<x id='17'/><ph>hahaha</ph> ha";//		ExportDocx output = new ExportDocx();//		output.ananysisTextWithTag(text);////		System.out.println(text.substring(0, 0));						System.out.println(851 + 5103 + 5103 + 2268 + 1418 );	}			private String getTextStr(){		String content = "";		try {			VTDGen vg = new VTDGen();//			vg.parseFile("temple/测试相关标记.xml", true);//			vg.parseFile("temple/测试相关标记_因linux不识别域而做的修改.xml", true);			vg.parseFile("temple/带表格的测试document_format.xml", true);//			vg.parseFile("temple/带表格的测试document.xml", true);						VTDNav vn = vg.getNav();			AutoPilot ap = new AutoPilot(vn);			VTDUtils vu = new VTDUtils(vn);			ap.declareXPathNameSpace("w", "http://schemas.openxmlformats.org/wordprocessingml/2006/main");			ap.selectXPath("/w:document/w:body");			if (ap.evalXPath() != -1) {				content = vu.getElementFragment();			}					} catch (Exception e) {			e.printStackTrace();		}		System.out.println(content);		return content;	}			/**	 * 创建一个段落	 * @return	 */	private String createParagram(String paragramContent){		StringBuffer pSB = new StringBuffer();		pSB.append("<w:p>");		pSB.append("<w:pPr><w:rPr><w:rFonts w:asciiTheme=\"minorEastAsia\" w:hAnsiTheme=\"minorEastAsia\"/>");		pSB.append("<w:color w:val=\"FF0000\" /><w:sz w:val=\"22\" />");		pSB.append("</w:rPr></w:pPr>");		pSB.append(paragramContent);		pSB.append("</w:p>");		return pSB.toString();	}			/**	 * <w14:cntxtAlts />　这个东西是什么？目前没有考虑。 FF0000	 * @param extendNode	 * @return	 */	private String createRNode(String text, boolean pointFont, String color){//		theme = "Arial Unicode MS";	// minorEastAsia				if (color == null) {			color = "000000";		}		StringBuffer rSB = new StringBuffer();		rSB.append("<w:r>\n<w:rPr>\n");		if (pointFont) {			rSB.append(FONTSTR + "\n");		}		rSB.append("<w:color w:val=\"" + color + "\"/><w:sz w:val=\"22\"/>\n</w:rPr>\n");		rSB.append("<w:t xml:space=\"preserve\">" + text + "</w:t>");		rSB.append("\n</w:r>\n");				return rSB.toString();	}			public static void deleteFileOrFolder(File file) {		if (file.exists()) {			if (file.isFile()) {				file.delete();			} else if (file.isDirectory()) {				File files[] = file.listFiles();				for (int i = 0; i < files.length; i++) {					deleteFileOrFolder(files[i]);				}			}			file.delete();		}	}				/**	 * 生成独立标记，例如　ph，或者　<g id='5'/>	 * @param tooltip 这是标记内容	 * ◇►　◇　◇	 * @return	 */	private String createNotPairTag(String tooltip){		tooltip = TextUtil.cleanSpecialString(tooltip);		StringBuffer sb = new StringBuffer();		sb.append("<w:hyperlink r:id=\"" + tagRId + "\" w:tooltip=\"" + tooltip +"\" w:history=\"1\">\n");		sb.append("<w:r>\n");		sb.append("<w:rPr>\n");		sb.append("<w:rFonts w:ascii=\"Songti SC Black\" w:hAnsi=\"Songti SC Black\" />\n");		sb.append("<w:color w:val=\"" + tagColor + "\" />\n");		sb.append("<w:sz w:val=\"22\" />\n");		sb.append("</w:rPr>\n");		sb.append("<w:t>◇</w:t>\n");		sb.append("</w:r>\n");		sb.append("</w:hyperlink>\n");		return sb.toString();	}		/**	 * 生成开始标记	 * @param tooltip	这是标记的内容	 * @return	 */	private String createStartTag(String tooltip){		tooltip = TextUtil.cleanSpecialString(tooltip);		StringBuffer sb = new StringBuffer();		sb.append("<w:hyperlink r:id=\"" + tagRId + "\" w:tooltip=\"" + tooltip + "\" w:history=\"1\">\n");		sb.append("<w:r>\n");		sb.append("<w:rPr>\n");		sb.append("<w:rFonts w:ascii=\"Times New Roman\" w:hAnsi=\"Times New Roman\" />\n");		sb.append("<w:color w:val=\"" + tagColor + "\" />\n");		sb.append("<w:sz w:val=\"22\" />\n");		sb.append("</w:rPr>\n");		sb.append("<w:t>►</w:t>\n");		sb.append("</w:r>\n");		sb.append("</w:hyperlink>\n");		return sb.toString();	}		/**	 * 生成结束标记，如 </g>	 * @param tooltip	这是标记的内容	 * @return	 */	private String createEndTag(String tooltip){		tooltip = TextUtil.cleanSpecialString(tooltip);		StringBuffer sb = new StringBuffer();		sb.append("<w:hyperlink r:id=\"" + tagRId + "\" w:tooltip=\"" + tooltip + "\" w:history=\"1\">\n");		sb.append("<w:r>\n");		sb.append("<w:rPr>\n");		sb.append("<w:rFonts w:ascii=\"Times New Roman\" w:hAnsi=\"Times New Roman\" />\n");		sb.append("<w:color w:val=\"" + tagColor + "\" />\n");		sb.append("<w:sz w:val=\"22\" />\n");		sb.append("</w:rPr>\n");		sb.append("<w:t>◄</w:t>\n");		sb.append("</w:r>\n");		sb.append("</w:hyperlink>\n");		return sb.toString();	}			/**	 * 给标记的　r:id 属性添加关系申明	 */	private void addTagRIdToRels() throws Exception{		VTDGen vg = new VTDGen();		String docRelsPath = docxFolderPath + File.separator + "word" + File.separator 				+ "_rels" + File.separator + "document.xml.rels";		boolean parseResult = vg.parseFile(docRelsPath, true);		if (!parseResult) {			throw new Exception(MessageFormat.format("文件{0}解析失败！", new Object[]{docRelsPath}));		}				VTDNav vn = vg.getNav();		AutoPilot ap = new AutoPilot(vn);		XMLModifier xm = new XMLModifier(vn);		ap.selectXPath("/Relationships");		if (ap.evalXPath() != -1) {			String tagRelationShip = "<Relationship Id=\"" + tagRId + "\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\" Target=\"http://null\" TargetMode=\"External\"/>";			xm.insertBeforeTail(tagRelationShip);			xm.output(docRelsPath);		}	}		/**	 * 创建列表内容	 * @return	 */	public String createTableContent(){		StringBuffer contentSB = new StringBuffer();		contentSB.append("<w:tbl>");		contentSB.append("<w:tblPr>");		contentSB.append("<w:tblW w:w=\"0\" w:type=\"auto\" />");		contentSB.append("<w:tblInd w:w=\"108\" w:type=\"dxa\" />");		contentSB.append("<w:tblStyle w:val=\"a3\" /><w:tblW w:w=\"0\" w:type=\"auto\" />");		contentSB.append("<w:tblBorders>");		contentSB.append("<w:top w:val=\"single\" w:sz=\"4\" w:space=\"0\" w:color=\"D2D2D2\" />");		contentSB.append("<w:left w:val=\"single\" w:sz=\"4\" w:space=\"0\" w:color=\"D2D2D2\" />");		contentSB.append("<w:bottom w:val=\"single\" w:sz=\"4\" w:space=\"0\" w:color=\"D2D2D2\" />");		contentSB.append("<w:right w:val=\"single\" w:sz=\"4\" w:space=\"0\" w:color=\"D2D2D2\" />");		contentSB.append("<w:insideH w:val=\"single\" w:sz=\"4\" w:space=\"0\" w:color=\"D2D2D2\" />");		contentSB.append("<w:insideV w:val=\"single\" w:sz=\"4\" w:space=\"0\" w:color=\"D2D2D2\" />");		contentSB.append("</w:tblBorders>");		contentSB.append("<w:tblLayout w:type=\"fixed\" />");		contentSB.append("<w:tblLook w:val=\"04A0\" w:firstRow=\"1\" w:lastRow=\"0\" w:firstColumn=\"1\" w:lastColumn=\"0\" w:noHBand=\"0\" w:noVBand=\"1\" />");		contentSB.append("</w:tblPr>");		contentSB.append("<w:tblGrid>");		contentSB.append("<w:gridCol w:w=\"" + FIRST_column_width + "\" />");		contentSB.append("<w:gridCol w:w=\"" + SECOND_column_width + "\" />");		contentSB.append("<w:gridCol w:w=\"" +THRID_column_width + "\" />");		if (FORTH_column_width > 0) {			contentSB.append("<w:gridCol w:w=\"" + FORTH_column_width + "\" />");		}		if (FIFTH_column_width > 0) {			contentSB.append("<w:gridCol w:w=\"" + FIFTH_column_width + "\" />");		}		contentSB.append("</w:tblGrid>");				contentSB.append(createTableHeader(srcLang, tgtLang));				contentSB.append("</w:tbl>");				return contentSB.toString();	}				/**	 * 创建列表的表关头	 * @param srcLang	 * @param tgtLang	 * @return	 */	private String createTableHeader(String srcLang, String tgtLang){		StringBuffer headerSB = new StringBuffer();		headerSB.append("<w:tr>");		// 第一列，显示　id		headerSB.append("<w:tc>");		headerSB.append("<w:tcPr><w:tcW w:w=\"" + FIRST_column_width + "\" w:type=\"dxa\" />");	// 这个　851 是规定列宽的		headerSB.append("<w:shd w:val=\"clear\" w:color=\"auto\" w:fill=\"A6C4EC\" /></w:tcPr>");		headerSB.append("<w:p>");		headerSB.append("<w:pPr><w:rPr>");		headerSB.append(FONTSTR);		headerSB.append("<w:b /><w:sz w:val=\"22\" />");		headerSB.append("</w:rPr></w:pPr>");				headerSB.append("<w:r>\n");		headerSB.append("<w:fldChar w:fldCharType=\"begin\"/>\n");		headerSB.append("</w:r>\n");		headerSB.append("<w:r>\n");		headerSB.append("<w:rPr>\n");		headerSB.append("<w:webHidden/>\n");		headerSB.append("</w:rPr>\n");		headerSB.append("<w:instrText>" + DocxConstant.HSDOCX_FLAG + "</w:instrText>\n");		headerSB.append("</w:r>\n");		headerSB.append("<w:r>\n");		headerSB.append("<w:fldChar w:fldCharType=\"end\"/>\n");		headerSB.append("</w:r>\n");				headerSB.append("<w:r>");		headerSB.append("<w:rPr>");		headerSB.append(FONTSTR);		headerSB.append("<w:b /><w:sz w:val=\"22\" /></w:rPr>");		headerSB.append("<w:t>" + Messages.getString("ExportDocx.column.id") + "</w:t>");		headerSB.append("</w:r>");		headerSB.append("</w:p>");		headerSB.append("</w:tc>");		// 第二列，显示源语言名称		headerSB.append("<w:tc>");		headerSB.append("<w:tcPr><w:tcW w:w=\"" + SECOND_column_width + "\" w:type=\"dxa\" />");		headerSB.append("<w:shd w:val=\"clear\" w:color=\"auto\" w:fill=\"A6C4EC\" /></w:tcPr>");		headerSB.append("<w:p>");		headerSB.append("<w:pPr><w:rPr>");		headerSB.append(FONTSTR);		headerSB.append("<w:b /><w:sz w:val=\"22\" />");		headerSB.append("</w:rPr></w:pPr>");				headerSB.append("<w:r>\n");		headerSB.append("<w:fldChar w:fldCharType=\"begin\"/>\n");		headerSB.append("</w:r>\n");		headerSB.append("<w:r>\n");		headerSB.append("<w:rPr>\n");		headerSB.append("<w:webHidden/>\n");		headerSB.append("</w:rPr>\n");		headerSB.append("<w:instrText>" + DocxConstant.COLUMN_TYPE_src + "</w:instrText>\n");		headerSB.append("</w:r>\n");		headerSB.append("<w:r>\n");		headerSB.append("<w:fldChar w:fldCharType=\"end\"/>\n");		headerSB.append("</w:r>\n");				headerSB.append("<w:r>");		headerSB.append("<w:rPr>");		headerSB.append(FONTSTR);		headerSB.append("<w:b /><w:sz w:val=\"22\" /></w:rPr>");		headerSB.append("<w:t>" + srcLang + "</w:t>");		headerSB.append("</w:r>");		headerSB.append("</w:p>");		headerSB.append("</w:tc>");				// 第三列，显示目标语言名称		headerSB.append("<w:tc>");		headerSB.append("<w:tcPr><w:tcW w:w=\"" +THRID_column_width + "\" w:type=\"dxa\" />");		headerSB.append("<w:shd w:val=\"clear\" w:color=\"auto\" w:fill=\"A6C4EC\" /></w:tcPr>");		headerSB.append("<w:p>");		headerSB.append("<w:pPr><w:rPr>");		headerSB.append(FONTSTR);		headerSB.append("<w:b /><w:sz w:val=\"22\" />");		headerSB.append("</w:rPr></w:pPr>");				headerSB.append("<w:r>\n");		headerSB.append("<w:fldChar w:fldCharType=\"begin\"/>\n");		headerSB.append("</w:r>\n");		headerSB.append("<w:r>\n");		headerSB.append("<w:rPr>\n");		headerSB.append("<w:webHidden/>\n");		headerSB.append("</w:rPr>\n");		headerSB.append("<w:instrText>" + DocxConstant.COLUMN_TYPE_tgt + "</w:instrText>\n");		headerSB.append("</w:r>\n");		headerSB.append("<w:r>\n");		headerSB.append("<w:fldChar w:fldCharType=\"end\"/>\n");		headerSB.append("</w:r>\n");				headerSB.append("<w:r>");		headerSB.append("<w:rPr>");		headerSB.append(FONTSTR);		headerSB.append("<w:b /><w:sz w:val=\"22\" /></w:rPr>");		headerSB.append("<w:t>" + tgtLang + "</w:t>");		headerSB.append("</w:r>");		headerSB.append("</w:p>");		headerSB.append("</w:tc>");				// 第四列，显示批注		if (FORTH_column_width > 0) {			headerSB.append("<w:tc>");			headerSB.append("<w:tcPr><w:tcW w:w=\"" + FORTH_column_width + "\" w:type=\"dxa\" />");			headerSB.append("<w:shd w:val=\"clear\" w:color=\"auto\" w:fill=\"A6C4EC\" /></w:tcPr>");			headerSB.append("<w:p>");			headerSB.append("<w:pPr><w:rPr>");			headerSB.append(FONTSTR);			headerSB.append("<w:b /><w:sz w:val=\"22\" />");			headerSB.append("</w:rPr></w:pPr>");						headerSB.append("<w:r>\n");			headerSB.append("<w:fldChar w:fldCharType=\"begin\"/>\n");			headerSB.append("</w:r>\n");			headerSB.append("<w:r>\n");			headerSB.append("<w:rPr>\n");			headerSB.append("<w:webHidden/>\n");			headerSB.append("</w:rPr>\n");			headerSB.append("<w:instrText>" + DocxConstant.COLUMN_TYPE_comment + "</w:instrText>\n");			headerSB.append("</w:r>\n");			headerSB.append("<w:r>\n");			headerSB.append("<w:fldChar w:fldCharType=\"end\"/>\n");			headerSB.append("</w:r>\n");		  				headerSB.append("<w:r>");			headerSB.append("<w:rPr>");			headerSB.append(FONTSTR);			headerSB.append("<w:b /><w:sz w:val=\"22\" /></w:rPr>");			headerSB.append("<w:t>" + Messages.getString("ExportDocx.column.comment") + "</w:t>");			headerSB.append("</w:r>");			headerSB.append("</w:p>");			headerSB.append("</w:tc>");		}				// 第五列，显示状态		if (FIFTH_column_width > 0) {			headerSB.append("<w:tc>");			headerSB.append("<w:tcPr><w:tcW w:w=\"" + FIFTH_column_width + "\" w:type=\"dxa\" />");			headerSB.append("<w:shd w:val=\"clear\" w:color=\"auto\" w:fill=\"A6C4EC\" /></w:tcPr>");			headerSB.append("<w:p>");			headerSB.append("<w:pPr><w:rPr>");			headerSB.append(FONTSTR);			headerSB.append("<w:b /><w:sz w:val=\"22\" />");			headerSB.append("</w:rPr></w:pPr>");						headerSB.append("<w:r>\n");			headerSB.append("<w:fldChar w:fldCharType=\"begin\"/>\n");			headerSB.append("</w:r>\n");			headerSB.append("<w:r>\n");			headerSB.append("<w:rPr>\n");			headerSB.append("<w:webHidden/>\n");			headerSB.append("</w:rPr>\n");			headerSB.append("<w:instrText>" + DocxConstant.COLUMN_TYPE_status + "</w:instrText>\n");			headerSB.append("</w:r>\n");			headerSB.append("<w:r>\n");			headerSB.append("<w:fldChar w:fldCharType=\"end\"/>\n");			headerSB.append("</w:r>\n");						headerSB.append("<w:r>");			headerSB.append("<w:rPr>");			headerSB.append(FONTSTR);			headerSB.append("<w:b /><w:sz w:val=\"22\" /></w:rPr>");			headerSB.append("<w:t>" + Messages.getString("ExportDocx.column.status") + "</w:t>");			headerSB.append("</w:r>");			headerSB.append("</w:p>");			headerSB.append("</w:tc>");		}				headerSB.append("</w:tr>");				return headerSB.toString();	}			/**	 * 创建列表的一行	 * @return	 */	public String createRow(TUBean bean){		StringBuffer rowSB = new StringBuffer();		rowSB.append("<w:tr>");				// 第一列		rowSB.append("<w:tc>");		rowSB.append("<w:tcPr><w:tcW w:w=\"" + FIRST_column_width + "\" w:type=\"dxa\" /></w:tcPr>");		rowSB.append("<w:p>");		rowSB.append("<w:pPr><w:rPr>");		rowSB.append(FONTSTR);		rowSB.append("<w:sz w:val=\"22\" />");		rowSB.append("</w:rPr></w:pPr>");		rowSB.append(createRNode(bean.getIndex(), true, null));						rowSB.append("<w:r>\n");		rowSB.append("<w:fldChar w:fldCharType=\"begin\"/>\n");		rowSB.append("</w:r>\n");		rowSB.append("<w:r>\n");		rowSB.append("<w:rPr>\n");		rowSB.append("<w:webHidden/>\n");		rowSB.append("</w:rPr>\n");		rowSB.append("<w:instrText>" + bean.getRowId() + "</w:instrText>\n");		rowSB.append("</w:r>\n");		rowSB.append("<w:r>\n");	  	rowSB.append("<w:fldChar w:fldCharType=\"end\"/>\n");	  	rowSB.append("</w:r>\n");		rowSB.append("</w:p>");		rowSB.append("</w:tc>");				// 第二列		rowSB.append("<w:tc>");		rowSB.append("<w:tcPr><w:tcW w:w=\"" + SECOND_column_width + "\" w:type=\"dxa\" /></w:tcPr>");		rowSB.append("<w:p>");		rowSB.append("<w:pPr><w:rPr>");		rowSB.append(FONTSTR);		rowSB.append("<w:sz w:val=\"22\" />");		rowSB.append("</w:rPr></w:pPr>");		String srcText = bean.getSrcText();		if (srcText == null) {			rowSB.append(createRNode("", true, null));		}else if (srcText.indexOf("<") != -1) {			rowSB.append(ananysisTextWithTag(srcText));		}else {			rowSB.append(createRNode(srcText, true, null));		}		rowSB.append("</w:p>");		rowSB.append("</w:tc>");				// 第三列		rowSB.append("<w:tc>");		rowSB.append("<w:tcPr><w:tcW w:w=\"" + THRID_column_width + "\" w:type=\"dxa\" /></w:tcPr>");		rowSB.append("<w:p>");		rowSB.append("<w:pPr><w:rPr>");		rowSB.append(FONTSTR);		rowSB.append("<w:sz w:val=\"22\" />");		rowSB.append("</w:rPr></w:pPr>");		String tgtText = bean.getTgtText();		if (tgtText == null) {			rowSB.append(createRNode("", true, null));		}else if (tgtText.indexOf("<") != -1) {			rowSB.append(ananysisTextWithTag(tgtText));		}else {			rowSB.append(createRNode(tgtText, true, null));		}		rowSB.append("</w:p>");		rowSB.append("</w:tc>");				// 第四列		if (FORTH_column_width > 0) {			rowSB.append("<w:tc>");			rowSB.append("<w:tcPr><w:tcW w:w=\"" + FORTH_column_width + "\" w:type=\"dxa\" /></w:tcPr>");			rowSB.append(createComment(bean.getComment()));			rowSB.append("</w:tc>");		}				// 第五列		if (FIFTH_column_width > 0) {			rowSB.append("<w:tc>");			rowSB.append("<w:tcPr><w:tcW w:w=\"" + FIFTH_column_width + "\" w:type=\"dxa\" /></w:tcPr>");			rowSB.append("<w:p>");			rowSB.append("<w:pPr><w:rPr>");			rowSB.append(FONTSTR);			rowSB.append("<w:sz w:val=\"22\" />");			rowSB.append("</w:rPr></w:pPr>");			rowSB.append("<w:r>");			rowSB.append("<w:rPr>");			rowSB.append(FONTSTR);			rowSB.append("<w:sz w:val=\"22\" /></w:rPr>");			rowSB.append("<w:t xml:space=\"preserve\">" + bean.getStatus() + "</w:t>");			rowSB.append("</w:r>");			rowSB.append("</w:p>");			rowSB.append("</w:tc>");		}				rowSB.append("</w:tr>");				return rowSB.toString();	}		/**	 * 生成批注	 * @param commentList	 * @return	 */	private String createComment(List<CommentBean> commentList){		StringBuffer rowSB = new StringBuffer();		for (CommentBean bean : commentList) {			rowSB.append("<w:p>");			rowSB.append("<w:pPr><w:rPr>");			rowSB.append(FONTSTR);			rowSB.append("<w:sz w:val=\"22\" />");			rowSB.append("</w:rPr></w:pPr>");						rowSB.append("<w:r>\n");			rowSB.append("<w:fldChar w:fldCharType=\"begin\"/>\n");			rowSB.append("</w:r>\n");			rowSB.append("<w:r>\n");			rowSB.append("<w:rPr>\n");			rowSB.append("<w:webHidden/>\n");			rowSB.append("</w:rPr>\n");			String userAndTimeStr = bean.getUser() + DocxConstant.COMMENT_SPLIT + bean.getTime();			rowSB.append("<w:instrText>" + TextUtil.cleanSpecialString(userAndTimeStr) +  "</w:instrText>\n");			rowSB.append("</w:r>\n");			rowSB.append("<w:r>\n");		  	rowSB.append("<w:fldChar w:fldCharType=\"end\"/>\n");		  	rowSB.append("</w:r>\n");		  				rowSB.append("<w:r>");			rowSB.append("<w:rPr>");			rowSB.append(FONTSTR);			rowSB.append("<w:sz w:val=\"22\" /></w:rPr>");			rowSB.append("<w:t xml:space=\"preserve\">" + TextUtil.cleanSpecialString(bean.getText()) + "</w:t>");			rowSB.append("</w:r>");			rowSB.append("</w:p>");		}		if (rowSB.length() <= 0) {			rowSB.append("<w:p>");			rowSB.append("<w:pPr><w:rPr>");			rowSB.append(FONTSTR);			rowSB.append("<w:sz w:val=\"22\" />");			rowSB.append("</w:rPr></w:pPr>");			rowSB.append("<w:r>");			rowSB.append("<w:rPr>");			rowSB.append(FONTSTR);			rowSB.append("<w:sz w:val=\"22\" /></w:rPr>");			rowSB.append("<w:t></w:t>");			rowSB.append("</w:r>");			rowSB.append("</w:p>");		}				return rowSB.toString();	}	}