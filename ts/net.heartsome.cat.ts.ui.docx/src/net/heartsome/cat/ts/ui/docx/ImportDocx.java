package net.heartsome.cat.ts.ui.docx;import java.io.File;import java.text.MessageFormat;import java.util.ArrayList;import java.util.List;import java.util.Map;import java.util.Map.Entry;import java.util.TreeMap;import java.util.regex.Matcher;import java.util.regex.Pattern;import org.eclipse.jface.dialogs.MessageDialog;import org.eclipse.swt.widgets.Display;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import net.heartsome.cat.common.util.DateUtils;import net.heartsome.cat.common.util.TextUtil;import net.heartsome.cat.ts.ui.docx.common.CommentBean;import net.heartsome.cat.ts.ui.docx.common.DocxConstant;import net.heartsome.cat.ts.ui.docx.common.FlagErrorException;import net.heartsome.cat.ts.ui.docx.common.RowBean;import net.heartsome.cat.ts.ui.docx.common.TagBean;import net.heartsome.cat.ts.ui.docx.common.ZipUtil;import net.heartsome.cat.ts.ui.docx.resource.Messages;import net.heartsome.xml.vtdimpl.VTDUtils;import com.ximpleware.AutoPilot;import com.ximpleware.VTDGen;import com.ximpleware.VTDNav;public class ImportDocx {	/** 过滤状态的过滤条件 */	private static final String statusRegex = "\\d+";		/** 要导入的 word 2007 文件路径 */	private String docxPath;	private String xliffPath;	private String tempFolder;	private String docxFolderPath;	private String documentXmlPath;		private VTDNav vn;	private VTDUtils vu;	private AutoPilot extendAP;	private AutoPilot otherAP;	private AutoPilot commentAP;		private boolean hasComment = false;	private boolean hasStatus = false;	private static final Logger LOGGER = LoggerFactory.getLogger(ImportDocx.class.getName());		public ImportDocx(){ }		public ImportDocx(String docxPath, String xliffPath){		this.docxPath = docxPath;		this.xliffPath  = xliffPath;	}			public List<RowBean> getDataFromWord() throws FlagErrorException{		List<RowBean> rowList = new ArrayList<RowBean>();		boolean flagRight = false;	// 文件标识正确				try {			tempFolder = System.getProperty("java.io.tmpdir")					+ System.getProperty("file.separator") + new File(docxPath).getName();			docxFolderPath = ZipUtil.upZipFile(docxPath, tempFolder);			documentXmlPath = docxFolderPath + File.separator + "word" + File.separator + "document.xml";					VTDGen vg = new VTDGen();			boolean parseResult = vg.parseFile(documentXmlPath, true);			if (!parseResult) {				throw new Exception(MessageFormat.format(Messages.getString("ImportDocxDialog.ok.parseError"), docxPath));			}						vn = vg.getNav();			AutoPilot ap = new AutoPilot(vn);			AutoPilot childAP = new AutoPilot(vn);			extendAP = new AutoPilot(vn);			otherAP = new AutoPilot(vn);			commentAP = new AutoPilot(vn);			vu = new VTDUtils(vn);						ap.declareXPathNameSpace("w", "http://schemas.openxmlformats.org/wordprocessingml/2006/main");			childAP.declareXPathNameSpace("w", "http://schemas.openxmlformats.org/wordprocessingml/2006/main");			extendAP.declareXPathNameSpace("w", "http://schemas.openxmlformats.org/wordprocessingml/2006/main");			otherAP.declareXPathNameSpace("w", "http://schemas.openxmlformats.org/wordprocessingml/2006/main");			commentAP.declareXPathNameSpace("w", "http://schemas.openxmlformats.org/wordprocessingml/2006/main");						String xpath = "/w:document/w:body/w:tbl/w:tr";			ap.selectXPath(xpath);			boolean isHeader = true;						while(ap.evalXPath() != -1){				RowBean bean = new RowBean();				int tcIdx = 0;				vn.push();				childAP.selectXPath("./w:tc");				// 备注：状态只写不读。故，不需要读状态一栏。				while(childAP.evalXPath() != -1){					tcIdx ++;					// 表头是没有数据的，故不读取数据					if (tcIdx == 1) {						// 先取第一列，获取其行号，以及　rowId，如果是头，里面保存的是固定值：heartsomeExportDocxFlag，若未找到，直接退出程序。						if (isHeader) {							boolean validResult = validFileLegalized();							if (!validResult) {								flagRight = true;								throw new FlagErrorException(MessageFormat.format(Messages.getString("ImportDocx.msg.flagError"), docxPath));							}else {								flagRight = true;							}						}else {							getIndexAndRowId(bean);						}					}else if (tcIdx == 2) {						// 第二列，为源文本						if (isHeader) {							String columnType = getColumnType();							if (columnType == null || columnType.trim().isEmpty() || !columnType.contains(DocxConstant.COLUMN_TYPE_src)) {								throw new FlagErrorException(MessageFormat.format(Messages.getString("ImportDocx.msg.flagError"), docxPath));							}						}else {							bean.setSrcElement(getSrcOrTgtText());						}					}else if (tcIdx == 3) {						// 第三列，为目标文本						if (isHeader) {							String columnType = getColumnType();							if (columnType == null || columnType.trim().isEmpty() || !columnType.contains(DocxConstant.COLUMN_TYPE_tgt)) {								throw new FlagErrorException(MessageFormat.format(Messages.getString("ImportDocx.msg.flagError"), docxPath));							}						}else {							bean.setTgtElement(getSrcOrTgtText());						}					}else if (tcIdx == 4) {						if (isHeader) {							String typeStr = getColumnType();							if (typeStr.contains(DocxConstant.COLUMN_TYPE_comment)) {								hasComment = true;							}else if (typeStr.contains(DocxConstant.COLUMN_TYPE_status)) {								hasStatus = true;							}						}else {							if (hasComment && hasStatus) {								getComments(bean);								}else if (hasComment) {								getComments(bean);								}						}					}				}				isHeader = false;				vn.pop();				rowList.add(bean);			}					} catch (FlagErrorException e) {			throw new FlagErrorException(e.getMessage());		} catch (Exception e) {			LOGGER.error("", e);		}finally{			if (!flagRight) {				throw new FlagErrorException(MessageFormat.format(Messages.getString("ImportDocx.msg.flagError"), docxPath));			}			if (new File(docxFolderPath).exists()) {				deleteFileOrFolder(new File(docxFolderPath));			}		}		return rowList;	}			/**	 * 判断当前 docx 文件是否合法，即，是否能正确导入。	 * @return	 */	private boolean validFileLegalized(){		StringBuffer flagSB = new StringBuffer();		try {			vn.push();						extendAP.selectXPath("./descendant::w:r");			boolean isHidden = false;			String text = "";			int index = -1;			while(extendAP.evalXPath() != -1){				vn.push();				otherAP.selectXPath("./w:fldChar");				if (otherAP.evalXPath() != -1) {					if ((index = vn.getAttrVal("w:fldCharType")) != -1) {						if ("begin".equals(vn.toString(index))) {							isHidden = true;						}else if ("end".equals(vn.toString(index))) {							isHidden = false;						}					}				}				vn.pop();								if (isHidden) {					vn.push();					otherAP.selectXPath("./w:t|w:instrText");					if (otherAP.evalXPath() != -1) {						if ((index = vn.getText()) != -1) {							text = vn.toRawString(index);							flagSB.append(text);						}					}					vn.pop();				}			}			vn.pop();		} catch (Exception e) {			LOGGER.error(Messages.getString("ImportDocx.LOGGER.getFlagError"), e);		}		return flagSB.toString().trim().contains(DocxConstant.HSDOCX_FLAG);	}			/**	 * 获取当前行的　行号　以及　rowId	 */	private void getIndexAndRowId(RowBean bean) throws Exception{		vn.push();		StringBuffer indexSB = new StringBuffer();		StringBuffer rowIdSB = new StringBuffer();				extendAP.selectXPath("./descendant::w:r");		boolean isRowId = false;		String text = "";		int index = -1;		while(extendAP.evalXPath() != -1){			vn.push();			otherAP.selectXPath("./w:fldChar");			if (otherAP.evalXPath() != -1) {				if ((index = vn.getAttrVal("w:fldCharType")) != -1) {					if ("begin".equals(vn.toString(index))) {						isRowId = true;					}else if ("end".equals(vn.toString(index))) {						isRowId = false;					}				}			}			vn.pop();						vn.push();			otherAP.selectXPath("./w:t|w:instrText");			if (otherAP.evalXPath() != -1) {				if ((index = vn.getText()) != -1) {					text = vn.toRawString(index);					if (isRowId) {						rowIdSB.append(text);					}else {						indexSB.append(text);					}				}			}			vn.pop();					}		vn.pop();				bean.setIndex(indexSB.toString());				String rowId = rowIdSB.toString();		rowId = rowId.replace("%%%FILE%%%", xliffPath);		// 这里的替换符见　RowIdUtil 类　getSpecialRowId() 方法		bean.setRowId(rowId);	}			/**	 * 获取当前表格表头　第四列或第五列的	 * @return	 * @throws Exception	 */	private String getColumnType() throws Exception{		vn.push();		StringBuffer typeSB = new StringBuffer();		extendAP.selectXPath("./descendant::w:r");		boolean isType = false;		String text = "";		int index = -1;		while(extendAP.evalXPath() != -1){			vn.push();			otherAP.selectXPath("./w:fldChar");			if (otherAP.evalXPath() != -1) {				if ((index = vn.getAttrVal("w:fldCharType")) != -1) {					if ("begin".equals(vn.toString(index))) {						isType = true;					}else if ("end".equals(vn.toString(index))) {						isType = false;					}				}			}			vn.pop();						vn.push();			otherAP.selectXPath("./w:t|w:instrText");			if (otherAP.evalXPath() != -1) {				if ((index = vn.getText()) != -1) {					text = vn.toRawString(index);					if (isType) {						typeSB.append(text);					}				}			}			vn.pop();					}		vn.pop();				return typeSB.toString();	}		/**	 * UNDO 导入时，如果行为空的情况未判断	 * 获取源文及译文的内容	 * 	 * 标记是以超链接的形式出现的，超链接有两种形式，第二种为		<w:r w:rsidR="00690EF7">			<w:fldChar w:fldCharType="begin" />		</w:r>		<w:r w:rsidR="00690EF7">			<w:instrText xml:space="preserve"> HYPERLINK "http://null" \o "&lt;g id='0'&gt;" </w:instrText>		</w:r>		<w:r w:rsidR="00690EF7">			<w:fldChar w:fldCharType="separate" />		</w:r>		<w:r>			<w:rPr>				<w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" />				<w:color w:val="7F7F7F" />				<w:sz w:val="22" />			</w:rPr>			<w:t>►</w:t>		</w:r>		<w:r w:rsidR="00690EF7">			<w:rPr>				<w:rFonts w:ascii="Times New Roman" w:hAnsi="Times New Roman" />				<w:color w:val="7F7F7F" />				<w:sz w:val="22" />			</w:rPr>			<w:fldChar w:fldCharType="end" />		</w:r>	 * @param bean	 */	private List<Object> getSrcOrTgtText() throws Exception{		Map<Integer, Object> elementMap = new TreeMap<Integer, Object>();		vn.push();		boolean isTag = false;		extendAP.selectXPath("./descendant::node()[name()!='w:hyperlink']/node()[name()='w:r' or name()='w:hyperlink']");		int index = -1;		String text = "";		while(extendAP.evalXPath() != -1){			String nodeName = vn.toString(vn.getCurrentIndex());			if ("w:r".equals(nodeName)) {								if (isTag) {					// 处理第二种超链接的情况					vn.push();					otherAP.selectXPath("./w:instrText");					if (otherAP.evalXPath() != -1) {						if ((index = vn.getText()) != -1) {							// 类似这种 HYPERLINK "http://null" \o "&lt;g id='0'&gt;"							String tagStr = text = vn.toRawString(index);														if (tagStr.trim().indexOf("HYPERLINK") == 0) {								tagStr = tagStr.substring(tagStr.indexOf(" \\o ") + 3).trim();								tagStr = tagStr.replace("\"", "");								tagStr = TextUtil.resetSpecialString(tagStr);								elementMap.put(index, new TagBean(tagStr));							}						}					}					vn.pop();				}else {					vn.push();					otherAP.selectXPath("./w:t");					if (otherAP.evalXPath() != -1) {						if ((index = vn.getText()) != -1) {							text = vn.toRawString(index);							if (text.length() > 0) {								elementMap.put(index, text);							}						}					}					vn.pop();				}								vn.push();				otherAP.selectXPath("./w:fldChar");				if (otherAP.evalXPath() != -1) {					if ((index = vn.getAttrVal("w:fldCharType")) != -1) {						if ("begin".equals(vn.toString(index))) {							isTag = true;						}else if ("end".equals(vn.toString(index))) {							isTag = false;						}					}				}				vn.pop();			}else if ("w:hyperlink".equals(nodeName)) {				vn.push();				if ((index = vn.getAttrVal("w:tooltip")) != -1) {					text = vn.toRawString(index);					if (text.length() > 0) {						text = TextUtil.resetSpecialString(text);						elementMap.put(index, new TagBean(text));					}				}				vn.pop();			}		}		vn.pop();				// 开始处理 map，将里面分散的句子连在一起		List<Object> elementList = new ArrayList<Object>();		StringBuffer textSB = new StringBuffer();		for(Entry<Integer, Object> entry : elementMap.entrySet()){			Object object = entry.getValue();			if (object instanceof TagBean) {				if (textSB.length() > 0) {					elementList.add(textSB.toString());					textSB = new StringBuffer();				}				elementList.add(object);			}else if (object instanceof String) {				textSB.append(object);			}		}		if (textSB.length() > 0) {			elementList.add(textSB.toString());		}				return elementList; 	}		/**	 * 获取批注相关信息	 * @param bean	 * @throws Exception	 */	private void getComments(RowBean bean) throws Exception{		vn.push();		StringBuffer commentTextSB = new StringBuffer();		StringBuffer userTimeSB = new StringBuffer();				String user = "";		String time = "";		commentAP.selectXPath("./descendant::w:p");		List<CommentBean> commentList = new ArrayList<CommentBean>();		while (commentAP.evalXPath() != -1) {			commentTextSB = new StringBuffer();			userTimeSB = new StringBuffer();			user = "";			time = "";						extendAP.selectXPath("./descendant::w:r");			boolean isUserAndTime = false;			String text = "";			int index = -1;			while(extendAP.evalXPath() != -1){				vn.push();				otherAP.selectXPath("./w:fldChar");				if (otherAP.evalXPath() != -1) {					if ((index = vn.getAttrVal("w:fldCharType")) != -1) {						if ("begin".equals(vn.toString(index))) {							isUserAndTime = true;						}else if ("end".equals(vn.toString(index))) {							isUserAndTime = false;						}					}				}				vn.pop();								vn.push();				otherAP.selectXPath("./w:t|w:instrText");				if (otherAP.evalXPath() != -1) {					if ((index = vn.getText()) != -1) {						text = vn.toRawString(index);						if (isUserAndTime) {							userTimeSB.append(text);						}else {							commentTextSB.append(text);						}					}				}				vn.pop();			}						if (commentTextSB.toString().trim().length() > 0) {				if ((index = userTimeSB.toString().indexOf(DocxConstant.COMMENT_SPLIT)) != -1) {					user = userTimeSB.toString().substring(0, index);					user = TextUtil.resetSpecialString(user);					time = userTimeSB.toString().substring(index + 1, userTimeSB.length());					time = TextUtil.resetSpecialString(time);				}				if (user.length() <= 0) {					user = System.getProperty("user.name");				}				if (time.length() <= 0) {					time = DateUtils.getStringDateShort();				}				commentList.add(new CommentBean(user, time, TextUtil.resetSpecialString(commentTextSB.toString())));			}		}		bean.setComment(commentList);		vn.pop();	}			/**	 * 获取第五列的状态	 * @return	 */	private String getStatus() throws Exception{		StringBuffer statusSB = new StringBuffer();		vn.push();		extendAP.selectXPath("./descendant::w:r/w:t");		int index = -1;		while(extendAP.evalXPath() != -1){			if ((index = vn.getText()) != -1) {				statusSB.append(vn.toRawString(index));			}		}		vn.pop();		String status = "";				Pattern pattern = Pattern.compile(statusRegex);		Matcher matcher = pattern.matcher(statusSB.toString());		while(matcher.find()){			status += matcher.group();		}		return status;	}		public static void deleteFileOrFolder(File file) {		if (file.exists()) {			if (file.isFile()) {				file.delete();			} else if (file.isDirectory()) {				File files[] = file.listFiles();				for (int i = 0; i < files.length; i++) {					deleteFileOrFolder(files[i]);				}			}			file.delete();		}	}	public boolean isHasComment() {		return hasComment;	}	public boolean isHasStatus() {		return hasStatus;	}		public static void main(String[] args) {		String tagStr = " HYPERLINK \"http://null\" \\o \"&lt;g id='1'&gt;\" ";		if (tagStr.trim().indexOf("HYPERLINK") == 0) {			tagStr = tagStr.substring(tagStr.indexOf(" \\o ") + 3).trim();			tagStr = tagStr.replace("\"", "");			TextUtil.resetSpecialString(tagStr);		}			}}