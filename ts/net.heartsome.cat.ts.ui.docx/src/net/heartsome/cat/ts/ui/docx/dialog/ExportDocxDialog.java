package net.heartsome.cat.ts.ui.docx.dialog;import java.io.File;import java.text.MessageFormat;import java.util.ArrayList;import java.util.List;import net.heartsome.cat.common.core.Constant;import net.heartsome.cat.common.file.XLFValidator;import net.heartsome.cat.common.resources.ResourceUtils;import net.heartsome.cat.common.ui.HsImageLabel;import net.heartsome.cat.common.ui.dialog.FileFolderSelectionDialog;import net.heartsome.cat.common.util.CommonFunction;import net.heartsome.cat.ts.core.file.RowIdUtil;import net.heartsome.cat.ts.ui.dialog.HelpDialog;import net.heartsome.cat.ts.ui.docx.Activator;import net.heartsome.cat.ts.ui.docx.ExportDocx;import net.heartsome.cat.ts.ui.docx.common.CommentBean;import net.heartsome.cat.ts.ui.docx.common.DocxConstant;import net.heartsome.cat.ts.ui.docx.common.TUBean;import net.heartsome.cat.ts.ui.docx.resource.Messages;import net.heartsome.cat.ts.util.ProgressIndicatorManager;import net.heartsome.xml.vtdimpl.VTDUtils;import org.eclipse.core.filesystem.EFS;import org.eclipse.core.internal.filesystem.local.LocalFile;import org.eclipse.core.resources.IFile;import org.eclipse.core.resources.IProject;import org.eclipse.core.resources.IResource;import org.eclipse.core.resources.IWorkspaceRoot;import org.eclipse.core.resources.ResourcesPlugin;import org.eclipse.core.runtime.CoreException;import org.eclipse.core.runtime.IProgressMonitor;import org.eclipse.core.runtime.IStatus;import org.eclipse.core.runtime.NullProgressMonitor;import org.eclipse.core.runtime.OperationCanceledException;import org.eclipse.core.runtime.Path;import org.eclipse.core.runtime.Status;import org.eclipse.core.runtime.SubProgressMonitor;import org.eclipse.core.runtime.jobs.IJobChangeEvent;import org.eclipse.core.runtime.jobs.Job;import org.eclipse.core.runtime.jobs.JobChangeAdapter;import org.eclipse.jface.dialogs.IDialogSettings;import org.eclipse.jface.dialogs.MessageDialog;import org.eclipse.jface.layout.GridDataFactory;import org.eclipse.jface.layout.GridLayoutFactory;import org.eclipse.jface.viewers.Viewer;import org.eclipse.jface.viewers.ViewerFilter;import org.eclipse.swt.SWT;import org.eclipse.swt.events.SelectionEvent;import org.eclipse.swt.events.SelectionListener;import org.eclipse.swt.layout.GridData;import org.eclipse.swt.layout.GridLayout;import org.eclipse.swt.widgets.Button;import org.eclipse.swt.widgets.Composite;import org.eclipse.swt.widgets.Control;import org.eclipse.swt.widgets.DirectoryDialog;import org.eclipse.swt.widgets.Display;import org.eclipse.swt.widgets.Group;import org.eclipse.swt.widgets.Label;import org.eclipse.swt.widgets.Shell;import org.eclipse.swt.widgets.Text;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import com.ximpleware.AutoPilot;import com.ximpleware.VTDGen;import com.ximpleware.VTDNav;public class ExportDocxDialog extends HelpDialog {	private static final Logger LOGGER = LoggerFactory.getLogger(ExportDocxDialog.class.getName());		private static final String STORE_DOCX_PATH = "net.heartsome.cat.ts.ui.docx.dialog.ExportDocxDialog.docxPath";	/** 用户工作空间根目录 */	private IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();	/** 项目集合，值为项目的路径 */	private ArrayList<String> lstProject = new ArrayList<String>();	/** xliff 文件路径文本框 */	private Text xliffPathTxt;	/** xliff 文件浏览按钮 */	private Button btnBrowseXLIFF;	/** 文本段状态复选框 */	private Button statusBtn;	/** 文本段批注复选框 */	private Button commentBtn;	/** RTF 文件路径文本框 */	private Text docxPathTxt;	/** RTF 文件浏览按钮 */	private Button browseDocxBtn;	/** 所选 xliff 文件的完整路径 */	private String strXliffFullPath;	/** 所选 xliff 文件的相对路径 */	private String strXliffRelativePath;		/** 导出过滤方式的排除按钮 */	private Button excludeBtn;		/** 导出过滤方式的仅导出按钮 */	private Button onlyExportBtn;		/** 排除锁定的文本段 */	private Button excludeLockedBtn;		/** 排除上下文匹配的文本段 */	private Button exclude101Btn;		/** 排除完全匹配的文本段 */	private Button exclude100Btn;		/** 仅导出带批注的文本段 */	private Button onlyExportNoteBtn;		/** 仅导出带疑问的文本段 */	private Button onlyExportReviewBtn;		private Group excludeGroup;		private Group onlyExportGroup;			private AutoPilot otherAP;	/**	 * 构造方法	 * @param parentShell	 */	public ExportDocxDialog(Shell parentShell, String strXliffRelativePath, String strXliffFullPath) {		super(parentShell);		this.strXliffRelativePath = strXliffRelativePath;		this.strXliffFullPath = strXliffFullPath;	}	protected void configureShell(Shell newShell) {		super.configureShell(newShell);		newShell.setText(Messages.getString("ExportDocxDialog.title"));			}	@Override	protected void createButtonsForButtonBar(Composite parent) {		// ROBERTHELP 导出 rtf		String language = CommonFunction.getSystemLanguage();		final String helpUrl = MessageFormat.format(					"/net.heartsome.cat.ts.ui.help/html/{0}/ch05s05.html#export-xliff-to-rtf", language);		setHelpUrl(helpUrl);		super.createButtonsForButtonBar(parent);	}	protected Control createDialogArea(Composite parent) {		Composite tparent = (Composite) super.createDialogArea(parent);		GridLayoutFactory.swtDefaults().extendedMargins(5, 5, 0, 0).numColumns(1).applyTo(tparent);		GridDataFactory.fillDefaults().hint(600, 420).grab(true, true).applyTo(tparent);		Group grpExport = new Group(tparent, SWT.None);		grpExport.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));		grpExport.setLayout(new GridLayout());		grpExport.setText(Messages.getString("ExportDocxDialog.exportContent"));				HsImageLabel imageLabel = new HsImageLabel(				Messages.getString("ExportDocxDialog.lable.lblInfo"),				Activator.getImageDescriptor(DocxConstant.EXPORT_GROUP_IMAGE_PATH));		Composite cmp = imageLabel.createControl(grpExport);		cmp.setLayout(new GridLayout());		Composite cmpTemp = (Composite) imageLabel.getControl();		cmpTemp.setLayoutData(new GridData(GridData.FILL_BOTH));		Composite cmpContent = new Composite(cmpTemp, SWT.None);		cmpContent.setLayout(new GridLayout(3, false));		GridData data = new GridData(GridData.FILL_BOTH);		data.horizontalSpan = 2;		cmpContent.setLayoutData(data);				new Label(cmpContent, SWT.None).setText(Messages.getString("ExportDocxDialog.lable.xliff"));		xliffPathTxt = new Text(cmpContent, SWT.BORDER);		xliffPathTxt.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));		xliffPathTxt.setEditable(false);		if (strXliffRelativePath != null) {			xliffPathTxt.setText(strXliffRelativePath);		}		btnBrowseXLIFF = new Button(cmpContent, SWT.None);		btnBrowseXLIFF.setText(Messages.getString("ExportDocxDialog.browseXliffBtn"));		statusBtn = new Button(cmpContent, SWT.CHECK);		statusBtn.setText(Messages.getString("ExportDocxDialog.statusBtn"));		statusBtn.setSelection(true);		GridDataFactory.fillDefaults().span(3, 1).applyTo(statusBtn);		commentBtn = new Button(cmpContent, SWT.CHECK);		commentBtn.setText(Messages.getString("ExportDocxDialog.commentBtn"));		GridDataFactory.fillDefaults().span(3, 1).applyTo(commentBtn);		Group groupFilter = new Group(tparent, SWT.None);		groupFilter.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));		groupFilter.setLayout(new GridLayout(2, false));		groupFilter.setText(Messages.getString("ExportDocxDialog.groupFilter"));				excludeBtn = new Button(groupFilter, SWT.RADIO);		excludeBtn.setText(Messages.getString("ExportDocxDialog.excludeBtn"));		excludeBtn.setSelection(true);				onlyExportBtn = new Button(groupFilter, SWT.RADIO);		onlyExportBtn.setText(Messages.getString("ExportDocxDialog.onlyExportBtn"));				Composite cmpFilter = new Composite(tparent, SWT.None);		GridLayoutFactory.fillDefaults().numColumns(2).equalWidth(false).spacing(30, 5).applyTo(cmpFilter);		cmpFilter.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));		excludeGroup = new Group(cmpFilter, SWT.None);		excludeGroup.setLayout(new GridLayout());		excludeGroup.setLayoutData(new GridData(GridData.FILL_BOTH));		excludeGroup.setText(Messages.getString("ExportDocxDialog.excludeGroup"));				excludeLockedBtn = new Button(excludeGroup, SWT.CHECK);		excludeLockedBtn.setText(Messages.getString("ExportDocxDialog.excludeLockedBtn"));		excludeLockedBtn.setSelection(true);				exclude101Btn = new Button(excludeGroup, SWT.CHECK);		exclude101Btn.setText(Messages.getString("ExportDocxDialog.exclude101Btn"));		exclude100Btn = new Button(excludeGroup, SWT.CHECK);		exclude100Btn.setText(Messages.getString("ExportDocxDialog.exclude100Btn"));				onlyExportGroup = new Group(cmpFilter, SWT.None);		onlyExportGroup.setLayoutData(new GridData(GridData.FILL_BOTH));		onlyExportGroup.setLayout(new GridLayout());		onlyExportGroup.setText(Messages.getString("ExportDocxDialog.onlyExportGroup"));				onlyExportNoteBtn = new Button(onlyExportGroup, SWT.RADIO);		onlyExportNoteBtn.setText(Messages.getString("ExportDocxDialog.onlyExportNoteBtn"));		onlyExportNoteBtn.setSelection(true);		onlyExportNoteBtn.setEnabled(false);				onlyExportReviewBtn = new Button(onlyExportGroup, SWT.RADIO);		onlyExportReviewBtn.setText(Messages.getString("ExportDocxDialog.onlyExportReviewBtn"));		onlyExportReviewBtn.setEnabled(false);		onlyExportGroup.setEnabled(false);				Composite cmpRTF = new Composite(tparent, SWT.None);		GridDataFactory.fillDefaults().applyTo(cmpRTF);		cmpRTF.setLayout(new GridLayout(3, false));		new Label(cmpRTF, SWT.None).setText(Messages.getString("ExportDocxDialog.label.docxPath"));		docxPathTxt = new Text(cmpRTF, SWT.BORDER);		docxPathTxt.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));		docxPathTxt.setEditable(false);		browseDocxBtn = new Button(cmpRTF, SWT.None);		browseDocxBtn.setText(Messages.getString("ExportDocxDialog.browseDocxBtn"));		for (IProject project : root.getProjects()) {			lstProject.add(project.getLocation().toOSString());		}		initListener();		imageLabel.computeSize();		initRtfPath();				return parent;	}	private void initRtfPath() {		IDialogSettings dialogSettings = Activator.getDefault().getDialogSettings();		String strRtfPath = dialogSettings.get(STORE_DOCX_PATH);		if (strRtfPath != null && !strRtfPath.trim().equals("")) {			docxPathTxt.setText(strRtfPath);		}	}	/**	 * 初始化按钮监听 ;	 */	private void initListener() {		btnBrowseXLIFF.addSelectionListener(new SelectionListener() {			public void widgetSelected(SelectionEvent event) {				FileFolderSelectionDialog dialog = new FileFolderSelectionDialog(getShell(), false, IResource.FILE) {					// 打开对话框时展开树形目录					public void create() {						super.create();						super.getTreeViewer().expandAll();					}				};				dialog.setTitle(Messages.getString("ExportDocxDialog.browseXLIFFBtn.msg0"));				dialog.setMessage(Messages.getString("ExportDocxDialog.browseXLIFFBtn.msg1"));				dialog.setDoubleClickSelects(true);				dialog.setAllowMultiple(false);				try {					dialog.setInput(EFS.getStore(root.getLocationURI()));				} catch (CoreException e1) {					LOGGER.error(Messages.getString("ExportDocxDialog.logger.getXliffError"), e1);					MessageDialog.openInformation(getShell(), Messages.getString("all.dialog.ok.title"),							Messages.getString("ExportDocxDialog.browseXLIFFBtn.msg2"));				}				dialog.addFilter(new ViewerFilter() {					@Override					public boolean select(Viewer viewer, Object parentElement, Object element) {						if (element instanceof LocalFile) {							LocalFile folder = (LocalFile) element;							if (folder.getName().equalsIgnoreCase(".hsConfig")									|| folder.getName().equalsIgnoreCase(".metadata")) {								return false;							}							if (lstProject.contains(folder.toString())) {								return true;							}							String xliffFolderPath = folder.toString();							for (String projectPath : lstProject) {								String path1 = projectPath + System.getProperty("file.separator") + Constant.FOLDER_XLIFF;								if (xliffFolderPath.startsWith(path1)) {									return true;								}							}						}						return false;					}				});				dialog.create();				dialog.open();				if (dialog.getResult() != null) {					Object obj = dialog.getFirstResult();					IFile file = root.getFileForLocation(Path.fromOSString(obj.toString()));					xliffPathTxt.setText(file.getFullPath().toOSString());					strXliffFullPath = ResourceUtils.iFileToOSPath(file);				}			}			public void widgetDefaultSelected(SelectionEvent e) {			}		});		browseDocxBtn.addSelectionListener(new SelectionListener() {			public void widgetSelected(SelectionEvent e) {				DirectoryDialog dialog = new DirectoryDialog(getShell());				dialog.setText(Messages.getString("ExportDocxDialog.browseDocxBtn.msg0"));				String defaultPath = System.getProperty("user.home");				if (docxPathTxt.getText() != null && !docxPathTxt.getText().trim().equals("")) {					defaultPath = docxPathTxt.getText();				}				dialog.setFilterPath(defaultPath);				String path = dialog.open();				if (path != null) {					docxPathTxt.setText(path);				}			}			public void widgetDefaultSelected(SelectionEvent e) {			}		});				excludeBtn.addSelectionListener(new SelectionListener() {			public void widgetSelected(SelectionEvent e) {				boolean isSelection = excludeBtn.getSelection();				excludeGroup.setEnabled(isSelection);				excludeLockedBtn.setEnabled(isSelection);				exclude101Btn.setEnabled(isSelection);				exclude100Btn.setEnabled(isSelection);				onlyExportGroup.setEnabled(!isSelection);				onlyExportNoteBtn.setEnabled(!isSelection);				onlyExportReviewBtn.setEnabled(!isSelection);			}						public void widgetDefaultSelected(SelectionEvent e) {							}		});				onlyExportBtn.addSelectionListener(new SelectionListener() {			public void widgetSelected(SelectionEvent e) {				boolean isSelection = onlyExportBtn.getSelection();				excludeGroup.setEnabled(!isSelection);				excludeLockedBtn.setEnabled(!isSelection);				exclude101Btn.setEnabled(!isSelection);				exclude100Btn.setEnabled(!isSelection);				onlyExportGroup.setEnabled(isSelection);				onlyExportNoteBtn.setEnabled(isSelection);				onlyExportReviewBtn.setEnabled(isSelection);			}						public void widgetDefaultSelected(SelectionEvent e) {							}		});	}	@Override	protected void okPressed() {		if (xliffPathTxt.getText() == null || xliffPathTxt.getText().trim().equals("")) {			MessageDialog.openInformation(getShell(), Messages.getString("all.dialog.ok.title"),					Messages.getString("ExportDocxDialog.ok.msg0"));			return;		}		String docxPath = docxPathTxt.getText().trim();		if (docxPath == null || docxPath.length() <= 0) {			MessageDialog.openInformation(getShell(), Messages.getString("all.dialog.ok.title"),					Messages.getString("ExportDocxDialog.ok.msg3"));			return;		}		IDialogSettings dialogSettings = Activator.getDefault().getDialogSettings();		dialogSettings.put(STORE_DOCX_PATH, docxPath);				XLFValidator.resetFlag();		if (!XLFValidator.validateXliffFile(strXliffFullPath)) {			return;		}		XLFValidator.resetFlag();				// 补全　docx 路径		docxPath = docxPath + File.separator + new File(strXliffFullPath).getName() + ".docx";		if (new File(docxPath).exists()) {			boolean confirm = MessageDialog.openConfirm(getShell(), Messages.getString("all.dialog.confirm"), 					MessageFormat.format(Messages.getString("ExportDocxDialog.ok.msg5"), "DOCX", docxPath));			if (confirm) {				new File(docxPath).delete();			}else {				return;			}		}		final boolean commentSelection = commentBtn.getSelection();		final boolean statusSelection = statusBtn.getSelection();				// 设置查询每个 tu 的条件，比如排除或者　仅导出		String expandXpath = "";		if (excludeBtn.getSelection()) {			if (excludeLockedBtn.getSelection()) {				expandXpath += " and not(@translate='no')";			}			if (exclude101Btn.getSelection()) {				expandXpath += " and not(target[@hs:quality='101'])";			}			if (exclude100Btn.getSelection()) {				expandXpath += " and not(target[@hs:quality='100'])";			}		}else if (onlyExportBtn.getSelection()) {			if (onlyExportNoteBtn.getSelection()) {				expandXpath += " and note/text()!=''";			}else if (onlyExportReviewBtn.getSelection()) {				expandXpath += " and @hs:needs-review='yes'";			}		}		final String finalExpandXpath = expandXpath;				// 这里开始调用导出的方法		final String finalDocxPath = docxPath;		Job job = new Job(Messages.getString("ExportDocxDialog.ok.monitor.title")) {			protected IStatus run(final IProgressMonitor monitor) {				try {					// 解析文件花一格。读取　xliff 数据花 1 格，导出花　18　格。					monitor.beginTask(Messages.getString("ExportDocxDialog.ok.monitor.msg0"), 20);					beginExport(monitor, finalDocxPath, commentSelection, statusSelection, finalExpandXpath);					Display.getDefault().syncExec(new Runnable() {						@Override						public void run() {							MessageDialog.openInformation(getShell(), Messages.getString("all.dialog.ok.title"), 									Messages.getString("ExportDocxDialog.ok.msg4"));						}					});					monitor.done();									} catch (OperationCanceledException e) {					// do nothing				}catch (final Exception e) {					Display.getDefault().syncExec(new Runnable() {						@Override						public void run() {							MessageDialog.openError(getShell(), Messages.getString("all.dialog.error"), 									Messages.getString("ExportDocxDialog.ok.exportError") + "\n" + e.getMessage());						}					});					LOGGER.error("Export xliff to MS WORD error\n" + e.getMessage(), e);				}				return Status.OK_STATUS;			}		};				// 当程序退出时，检测当前　job 是否正常关闭		CommonFunction.jobCantCancelTip(job);		job.addJobChangeListener(new JobChangeAdapter(){			@Override			public void running(IJobChangeEvent event) {				ProgressIndicatorManager.displayProgressIndicator();				super.running(event);			}			@Override			public void done(IJobChangeEvent event) {				ProgressIndicatorManager.hideProgressIndicator();				super.done(event);			}		});		job.setUser(true);		job.schedule();		close();	}			/**	 * 开始导出功能	 */	private void beginExport(IProgressMonitor monitor, final String docxPath, boolean exportComment, boolean exportStatus, String expandXpath) throws Exception{		if (monitor == null) {			monitor = new NullProgressMonitor();		}				VTDGen vg = new VTDGen();		if (!vg.parseFile(strXliffFullPath, true)) {			final String parseErrorTip = MessageFormat.format(Messages.getString("ExportDocxDialog.parseError"), ResourceUtils.fileToIFile(docxPath).getFullPath().toOSString());			Display.getDefault().syncExec(new Runnable() {				@Override				public void run() {					MessageDialog.openError(getShell(), Messages.getString("all.dialog.warning"), parseErrorTip);				}			});			throw new Exception(parseErrorTip);		}		monitor.worked(1);				VTDNav vn = vg.getNav();		VTDUtils vu = new VTDUtils(vn);		AutoPilot ap = new AutoPilot(vn);		ap.declareXPathNameSpace("hs", "http://www.heartsome.net.cn/2008/XLFExtension");		otherAP = new AutoPilot(vn);		otherAP.declareXPathNameSpace("hs", "http://www.heartsome.net.cn/2008/XLFExtension");		AutoPilot childAP = new AutoPilot(vn);		childAP.declareXPathNameSpace("hs", "http://www.heartsome.net.cn/2008/XLFExtension");		String srcLang = "";		String tgtLang = "";		// 备注：目前只支持处理一种目标语言的情况		ap.selectXPath("/xliff//file[1]");		if (ap.evalXPath() != -1) {			srcLang = vu.getCurrentElementAttribut("source-language", "");			tgtLang = vu.getCurrentElementAttribut("target-language", "");		}				if ("".equals(srcLang)) {			Display.getDefault().syncExec(new Runnable() {				@Override				public void run() {					MessageDialog.openWarning(getShell(), Messages.getString("all.dialog.warning"), Messages.getString("ExportDocxDialog.ok.msg1"));				}			});			LOGGER.error(Messages.getString("ExportDocxDialog.ok.msg1"));		}		if ("".equals(tgtLang)) {			Display.getDefault().syncExec(new Runnable() {				@Override				public void run() {					MessageDialog.openWarning(getShell(), Messages.getString("all.dialog.warning"), Messages.getString("ExportDocxDialog.ok.msg2"));				}			});			LOGGER.error(Messages.getString("ExportDocxDialog.ok.msg2"));		}						String xpath = "/xliff/file[@source-language='" + srcLang + "' and @target-language='" + tgtLang + "']/body/descendant::trans-unit[(source/text()!='' or source/*)" + expandXpath + "]";		ap.selectXPath(xpath);		List<TUBean> tuDataList = new ArrayList<TUBean>();				String rowId = "";		int status = DocxConstant.STATUS_unstrans;		boolean approved = false;		boolean isLocked = false;		boolean isNotSendToTm = false;		boolean needsReview = false;		int index = -1;		while(ap.evalXPath() != -1){			status = DocxConstant.STATUS_unstrans;			approved = false;			isLocked = false;			isNotSendToTm = false;			needsReview = false;						TUBean bean = new TUBean();			rowId = RowIdUtil.getSpecialRowId(vn);			bean.setRowId(rowId);						// 是否批准			if ((index = vn.getAttrVal("approved")) != -1) {				if ("yes".equals(vn.toString(index))) {					approved = true;				}			}						// 是否锁定			if ((index = vn.getAttrVal("translate")) != -1) {				if ("no".equals(vn.toString(index))) {					isLocked = true;				}			}						// 是否不发送数据库			if ((index = vn.getAttrVal("hs:send-to-tm")) != -1) {				if ("no".equals(vn.toString(index))) {					isNotSendToTm = true;				}			}						// 是否是疑问文本段			if ((index = vn.getAttrVal("hs:needs-review")) != -1) {				if ("yes".equals(vn.toString(index))) {					needsReview = true;				}			}						vn.push();			childAP.selectXPath("./source");			if (childAP.evalXPath() != -1) {				bean.setSrcText(vu.getElementContent());			}			vn.pop();						vn.push();			childAP.selectXPath("./target");			if (childAP.evalXPath() != -1) {				if ((index = vn.getAttrVal("state")) != -1) {					String stateStr = vn.toString(index);					if ("new".equals(stateStr)) {						status = DocxConstant.STATUS_draft;	// 草稿					}else if ("translated".equals(stateStr)) {						if (approved) {							status = DocxConstant.STATUS_approved;	// 批准翻译						}else {							status = DocxConstant.STATUS_translated;		//　完成翻译						}					}else if ("signed-off".equals(stateStr) && approved) {						status = DocxConstant.STATUS_signedOff;		// 签发					}				}								bean.setTgtText(vu.getElementContent());			}else {				status = DocxConstant.STATUS_unstrans;			}			vn.pop();						// 这里参照界面上状态的写法，分三个部份，第一个为（草稿，已翻译，完成翻译，批注，签发，锁定），　第二部份为不送至库，第三部份为疑问。			String beanStatus = "";			if (isLocked) {				beanStatus += Messages.getString("ExportDocxDialog.ok.status.locked");			}else {				switch (status) {				case DocxConstant.STATUS_unstrans:					beanStatus += Messages.getString("ExportDocxDialog.ok.status.unstrans");					break;				case DocxConstant.STATUS_draft:					beanStatus += Messages.getString("ExportDocxDialog.ok.status.draft");					break;				case DocxConstant.STATUS_translated:					beanStatus += Messages.getString("ExportDocxDialog.ok.status.translated");					break;				case DocxConstant.STATUS_approved:					beanStatus += Messages.getString("ExportDocxDialog.ok.status.approved");					break;				case DocxConstant.STATUS_signedOff:					beanStatus += Messages.getString("ExportDocxDialog.ok.status.signedOff");					break;				default:					break;				}			}						if (isNotSendToTm) {				beanStatus += "、";				beanStatus += Messages.getString("ExportDocxDialog.ok.status.NotSendToTm");			}			if (needsReview) {				beanStatus += "、";				beanStatus += Messages.getString("ExportDocxDialog.ok.status.Review");			}						bean.setStatus(beanStatus);						getComments(vn, vu, bean);						bean.setIndex("" + (tuDataList.size() + 1));			tuDataList.add(bean);		}		monitor.worked(1);				// 开始导出操作。规划出 subMonitor		IProgressMonitor subMonitor = new SubProgressMonitor(monitor, 18, SubProgressMonitor.PREPEND_MAIN_LABEL_TO_SUBTASK);				ExportDocx wordOutput = new ExportDocx(srcLang, tgtLang, docxPath, getShell(), exportComment, exportStatus);		wordOutput.output(tuDataList, subMonitor);		subMonitor.done();	}			/**	 * 获取批注	 * @param vn	 * @param bean	 */	private void getComments(VTDNav vn, VTDUtils vu, TUBean bean) throws Exception{		vn.push();		List<CommentBean> commentList = new ArrayList<CommentBean>();		otherAP.selectXPath("./note");		String content = "";		String user  = "";		String time = "";		String text = "";		int index = -1;		while(otherAP.evalXPath() != -1){			// <note from='Mac'>2013-05-13:test</note>			if ((index = vn.getAttrVal("from")) != -1) {				user = vn.toString(index);			}			content = vu.getElementContent();			if (content == null || content.length() <= 0) {				continue;			}			if ((index = content.indexOf(":")) != -1) {				time = content.substring(0, index);				text = content.substring(index + 1, content.length());			}else {				text = content;			}			commentList.add(new CommentBean(user, time, text));		}		bean.setComment(commentList);		vn.pop();	}				}