package net.heartsome.cat.ts.ui.docx.dialog;import java.io.File;import java.text.MessageFormat;import java.util.LinkedList;import java.util.List;import net.heartsome.cat.common.util.CommonFunction;import net.heartsome.cat.ts.core.bean.XliffBean;import net.heartsome.cat.ts.ui.dialog.HelpDialog;import net.heartsome.cat.ts.ui.docx.Activator;import net.heartsome.cat.ts.ui.docx.resource.Messages;import net.heartsome.cat.ts.ui.external.ExportConfig;import net.heartsome.cat.ts.ui.external.ExportExternal;import org.eclipse.core.resources.IProject;import org.eclipse.jface.dialogs.IDialogConstants;import org.eclipse.jface.dialogs.IDialogSettings;import org.eclipse.jface.dialogs.MessageDialog;import org.eclipse.jface.layout.GridDataFactory;import org.eclipse.jface.layout.GridLayoutFactory;import org.eclipse.jface.viewers.ArrayContentProvider;import org.eclipse.jface.viewers.ColumnWeightData;import org.eclipse.jface.viewers.ITableLabelProvider;import org.eclipse.jface.viewers.LabelProvider;import org.eclipse.jface.viewers.TableLayout;import org.eclipse.jface.viewers.TableViewer;import org.eclipse.swt.SWT;import org.eclipse.swt.events.ModifyEvent;import org.eclipse.swt.events.ModifyListener;import org.eclipse.swt.events.SelectionAdapter;import org.eclipse.swt.events.SelectionEvent;import org.eclipse.swt.graphics.Image;import org.eclipse.swt.layout.GridData;import org.eclipse.swt.layout.GridLayout;import org.eclipse.swt.widgets.Button;import org.eclipse.swt.widgets.Combo;import org.eclipse.swt.widgets.Composite;import org.eclipse.swt.widgets.Control;import org.eclipse.swt.widgets.DirectoryDialog;import org.eclipse.swt.widgets.Group;import org.eclipse.swt.widgets.Label;import org.eclipse.swt.widgets.Shell;import org.eclipse.swt.widgets.Table;import org.eclipse.swt.widgets.TableColumn;import org.eclipse.swt.widgets.Text;import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class ExportExternalDialog extends HelpDialog {	protected static final Logger LOGGER = LoggerFactory.getLogger(ExportExternalDialog.class.getName());		/** 保存到文件夹.*/	private Text txtSaveas;	/**  导出批注. */	private Button btnHsproofNote;	/**  导出状态. */	private Button btnHsproofState;	/**  过滤所有面板. */	private Composite cmpFilterAllTrans;		/**  过滤所有按钮. */	private Button btnAllTrans;	/**  排除锁定. */	private Button btnExceptLocked;		/**  排除上下文匹配. */	private Button btnExceptContextMatch;		/**  排除全匹配. */	private Button btnExceptFullMatch;		/**  仅导出面板. */	private Composite cmpFilterOnlySpecial;		/**  仅导出按钮. */	private Button btnOnlySpecial;	/**  带批注的文本段. */	private Button btnHasNote;		/**  有疑问的文本段. */	private Button btnNeedReview;		/**  状态为. */	private Composite cmpFilterWhenState;		/**  状态为按钮. */	private Button btnFilterWhenState;	/**  未翻译. */	private Button btnNotrans;	/**  草稿. */	private Button btnNewtrans;	/**  已翻译. */	private Button btnTransed;	/**  已批准. */	private Button btnApproved;	private IDialogSettings dialogSetting;	private Combo cmb;	private ExportConfig config;	private List<XliffBean> xlfBeans;	private List<String> proPath;	public ExportExternalDialog(ExportConfig config) {		super(config.getShell());		this.config = config;		dialogSetting = Activator.getDefault().getDialogSettings();		setShellStyle(getShellStyle() | SWT.RESIZE);				if (config.getProjects() != null) {			xlfBeans = new LinkedList<XliffBean>();			proPath = new LinkedList<String>();			for (IProject project : config.getProjects()) {				String str = project.getLocation().toOSString();				for (XliffBean bean : config.getXlfBean(project)) {					xlfBeans.add(bean);					proPath.add(bean.getXliffFile().substring(str.lastIndexOf(File.separator)));				}			}		}	}	@Override	protected void configureShell(Shell newShell) {		super.configureShell(newShell);		newShell.setText(Messages.getString("ExportDocxDialog.title"));	}		@Override	protected void createButtonsForButtonBar(Composite parent) {		// ROBERTHELP 导出 rtf		String language = CommonFunction.getSystemLanguage();		final String helpUrl = MessageFormat.format(				"/net.heartsome.cat.ts.ui.help/html/{0}/ch05s05.html#export-xliff-to-rtf", language);		setHelpUrl(helpUrl);		super.createButtonsForButtonBar(parent);		getButton(IDialogConstants.OK_ID).setEnabled(false);	}	protected Control createDialogArea(Composite parent) {		Composite tparent = (Composite) super.createDialogArea(parent);		GridDataFactory.createFrom(new GridData(GridData.FILL_BOTH)).hint(600, SWT.DEFAULT).applyTo(tparent);		final Group groupFile = new Group(tparent, SWT.NONE);		groupFile.setText(Messages.getString("ExportDocxDialog.lable.xliff"));		groupFile.setLayout(new GridLayout(1, false));		groupFile.setLayoutData(new GridData(GridData.FILL_BOTH));				final TableViewer tbv = new TableViewer(groupFile, SWT.V_SCROLL | SWT.FULL_SELECTION | SWT.BORDER);		final Table table = tbv.getTable();		table.setHeaderVisible(true);		table.setLinesVisible(true);		TableLayout tableLayout = new TableLayout();		table.setLayout(tableLayout);		GridDataFactory.swtDefaults().align(SWT.FILL, SWT.FILL).grab(true, true).hint(SWT.DEFAULT, 90).applyTo(table);		tableLayout.addColumnData(new ColumnWeightData(1));		new TableColumn(table, SWT.NONE).setText(Messages.getString("ExportDocxDialog.lable.nodot"));		tableLayout.addColumnData(new ColumnWeightData(10));		new TableColumn(table, SWT.NONE).setText(Messages.getString("ExportDocxDialog.lable.fullPath"));		tableLayout.addColumnData(new ColumnWeightData(2));		new TableColumn(table, SWT.NONE).setText(Messages.getString("ExportDocxDialog.lable.srcLang"));		tableLayout.addColumnData(new ColumnWeightData(2));		new TableColumn(table, SWT.NONE).setText(Messages.getString("ExportDocxDialog.lable.tgtLang"));		tbv.setLabelProvider(new TableViewLabelProvider());		tbv.setContentProvider(new ArrayContentProvider());		tbv.setInput(xlfBeans);		final Group groupExportType = new Group(tparent, SWT.NONE);		groupExportType.setText(Messages.getString("ExportDocxDialog.lable.exporttype"));		groupExportType.setLayout(new GridLayout(3, false));		groupExportType.setLayoutData(new GridData(GridData.FILL_BOTH));		final Label lblExportType = new Label(groupExportType, SWT.NONE);		lblExportType.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));		lblExportType.setText(Messages.getString("ExportDocxDialog.lable.exportchoose"));		cmb = new Combo(groupExportType, SWT.NONE | SWT.READ_ONLY);		GridDataFactory.swtDefaults().span(2, 1).grab(true, false).align(SWT.FILL, SWT.FILL).applyTo(cmb);		for (String type : ExportExternal.getExportTypes()) {			cmb.add(type);		}		cmb.addSelectionListener(new SelectionAdapter() {			@Override			public void widgetSelected(SelectionEvent e) {				final int exportCode = ExportExternal.getExportTypeCode(cmb.getSelectionIndex());				btnHsproofNote.setEnabled(exportCode == ExportExternal.EXPORT_HSPROOF);				btnHsproofState.setEnabled(btnHsproofNote.getEnabled());				btnNotrans.setEnabled(exportCode != ExportExternal.EXPORT_TMX						&& btnFilterWhenState.getSelection());				if (ExportExternal.EXPORT_TMX == exportCode						&& btnFilterWhenState.getSelection()) {					btnNotrans.setSelection(false);				}			}		});		final Label lblR8State = new Label(groupExportType, SWT.NONE);		lblR8State.setText(Messages.getString("ExportDocxDialog.lable.hsproof"));		btnHsproofState = new Button(groupExportType, SWT.CHECK);		btnHsproofState.setText(Messages.getString("ExportDocxDialog.statusBtn"));		btnHsproofNote = new Button(groupExportType, SWT.CHECK);		btnHsproofNote.setText(Messages.getString("ExportDocxDialog.commentBtn"));		final Group groupFilter = new Group(tparent, SWT.NONE);		groupFilter.setText(Messages.getString("ExportDocxDialog.lable.filter"));		groupFilter.setLayout(new GridLayout(3, false));		groupFilter.setLayoutData(new GridData(GridData.FILL_BOTH));		// 过滤大类		btnAllTrans = new Button(groupFilter, SWT.RADIO);		btnAllTrans.setText(Messages.getString("ExportDocxDialog.lable.filterAll"));		btnAllTrans.setSelection(true);		btnAllTrans.addSelectionListener(new SelectionAdapter() {			@Override			public void widgetSelected(SelectionEvent e) {				if (btnAllTrans.getSelection()) {					setFilterDefaultValue();				}			}		});		btnOnlySpecial = new Button(groupFilter, SWT.RADIO);		btnOnlySpecial.setText(Messages.getString("ExportDocxDialog.onlyExportBtn"));		btnOnlySpecial.addSelectionListener(new SelectionAdapter() {			@Override			public void widgetSelected(SelectionEvent e) {				if (btnOnlySpecial.getSelection()) {					setFilterDefaultValue();				}			};		});		btnFilterWhenState = new Button(groupFilter, SWT.RADIO);		btnFilterWhenState.setText(Messages.getString("ExportDocxDialog.lable.hasState"));		btnFilterWhenState.addSelectionListener(new SelectionAdapter() {			@Override			public void widgetSelected(SelectionEvent e) {				if (btnFilterWhenState.getSelection()) {					setFilterDefaultValue();				}			};		});		// 大类细节		cmpFilterAllTrans = new Composite(groupFilter, SWT.NONE);		cmpFilterAllTrans.setLayout(new GridLayout(1, false));		cmpFilterAllTrans.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));		btnExceptLocked = new Button(cmpFilterAllTrans, SWT.CHECK);		btnExceptLocked.setText(Messages.getString("ExportDocxDialog.lable.exceptLock"));		btnExceptLocked.setEnabled(true);		btnExceptContextMatch = new Button(cmpFilterAllTrans, SWT.CHECK);		btnExceptContextMatch.setText(Messages.getString("ExportDocxDialog.lable.exceptCxtMatch"));		btnExceptContextMatch.setEnabled(true);		btnExceptFullMatch = new Button(cmpFilterAllTrans, SWT.CHECK);		btnExceptFullMatch.setText(Messages.getString("ExportDocxDialog.lable.exceptFullMatch"));		cmpFilterOnlySpecial = new Composite(groupFilter, SWT.NONE);		cmpFilterOnlySpecial.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));		cmpFilterOnlySpecial.setLayout(new GridLayout(1, false));		btnHasNote = new Button(cmpFilterOnlySpecial, SWT.CHECK);		btnHasNote.setText(Messages.getString("ExportDocxDialog.onlyExportNoteBtn"));		btnNeedReview = new Button(cmpFilterOnlySpecial, SWT.CHECK);		btnNeedReview.setText(Messages.getString("ExportDocxDialog.onlyExportReviewBtn"));		cmpFilterWhenState = new Composite(groupFilter, SWT.NONE);		cmpFilterWhenState.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));		cmpFilterWhenState.setLayout(new GridLayout(1, false));		btnNotrans = new Button(cmpFilterWhenState, SWT.CHECK);		btnNotrans.setText(Messages.getString("ExportDocxDialog.lable.state.noTrans"));		btnNotrans.setText(Messages.getString("ExportDocxDialog.lable.state.noTrans"));		btnNewtrans = new Button(cmpFilterWhenState, SWT.CHECK);		btnNewtrans.setText(Messages.getString("ExportDocxDialog.lable.state.new"));		btnNewtrans.setText(Messages.getString("ExportDocxDialog.lable.state.new"));		btnTransed = new Button(cmpFilterWhenState, SWT.CHECK);		btnTransed.setText(Messages.getString("ExportDocxDialog.lable.state.hasTrans"));		btnApproved = new Button(cmpFilterWhenState, SWT.CHECK);		btnApproved.setText(Messages.getString("ExportDocxDialog.lable.state.hasApprove"));		Composite cmpSaveas = new Composite(tparent, SWT.NONE);		cmpSaveas.setLayout(GridLayoutFactory.swtDefaults().numColumns(3).create());		cmpSaveas.setLayoutData(new GridData(GridData.FILL_BOTH));		Label lblSaveas = new Label(cmpSaveas, SWT.NONE);		lblSaveas.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));		lblSaveas.setText(Messages.getString("ExportDocxDialog.lable.saveas"));		txtSaveas = new Text(cmpSaveas, SWT.BORDER | SWT.READ_ONLY);		txtSaveas.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));		txtSaveas.addModifyListener(new ModifyListener() {			@Override			public void modifyText(ModifyEvent e) {				getButton(IDialogConstants.OK_ID).setEnabled(!txtSaveas.getText().isEmpty());			}		});		Button btnSaveas = new Button(cmpSaveas, SWT.NONE);		btnSaveas.setText(Messages.getString("ExportDocxDialog.browseDocxBtn"));		btnSaveas.addSelectionListener(new SelectionAdapter() {			public void widgetSelected(SelectionEvent e) {				DirectoryDialog dialog = new DirectoryDialog(getShell());				dialog.setFilterPath(dialogSetting.get("defaultPath"));				String path = dialog.open();				if (path != null) {					txtSaveas.setText(path);					dialogSetting.put("defaultPath", path);				}			}		});		setDefaultValue();		return parent;	}	private void setDefaultValue() {		if (dialogSetting.getBoolean("ExportUnclean.useLast")) {			cmb.select(dialogSetting.getInt("cmb"));			btnHsproofState.setSelection(dialogSetting.getBoolean("btnTransState"));			btnHsproofNote.setSelection(dialogSetting.getBoolean("btnTransNote"));			btnAllTrans.setSelection(dialogSetting.getBoolean("btnAllTrans"));			btnOnlySpecial.setSelection(dialogSetting.getBoolean("btnOnlySpecial"));			btnFilterWhenState.setSelection(dialogSetting.getBoolean("btnOnlyState"));			btnExceptLocked.setSelection(dialogSetting.getBoolean("btnNotLocked"));			btnExceptFullMatch.setSelection(dialogSetting.getBoolean("btnNotFullMatch"));			btnExceptContextMatch.setSelection(dialogSetting.getBoolean("btnNotContextMatch"));			btnHasNote.setSelection(dialogSetting.getBoolean("btnHasNote"));			btnNeedReview.setSelection(dialogSetting.getBoolean("btnNeedReview"));			btnNotrans.setSelection(dialogSetting.getBoolean("btnNoTrans"));			btnNewtrans.setSelection(dialogSetting.getBoolean("btnNew"));			btnTransed.setSelection(dialogSetting.getBoolean("btnHasTransed"));			btnApproved.setSelection(dialogSetting.getBoolean("btnHasConfirm"));		} else {// so set default			cmb.select(0);			btnHsproofState.setSelection(true);			btnHsproofNote.setSelection(false);			btnAllTrans.setSelection(true);			btnOnlySpecial.setSelection(false);			btnFilterWhenState.setSelection(false);			btnExceptLocked.setSelection(true);			btnExceptContextMatch.setSelection(true);			btnExceptFullMatch.setSelection(false);			btnHasNote.setSelection(true);			btnNeedReview.setSelection(true);			btnNotrans.setSelection(true);			btnNewtrans.setSelection(true);			btnTransed.setSelection(true);			btnApproved.setSelection(false);		}		setFilterDefaultValue();	}	private void setFilterDefaultValue() {		int exportType = ExportExternal.getExportTypeCode(cmb.getSelectionIndex());		int i = 0;		if (btnAllTrans.getSelection()) {			i = 0;		} else if (btnOnlySpecial.getSelection()) {			i = 1;		} else if (btnFilterWhenState.getSelection()) {			i = 2;		}		btnExceptLocked.setEnabled(i == 0);		btnExceptFullMatch.setEnabled(i == 0);		btnExceptContextMatch.setEnabled(i == 0);		btnHasNote.setEnabled(i == 1);		btnNeedReview.setEnabled(i == 1);		btnNotrans.setEnabled(i == 2 				&& ExportExternal.EXPORT_TMX != exportType);		btnNewtrans.setEnabled(i == 2);		btnTransed.setEnabled(i == 2);		btnApproved.setEnabled(i == 2);				btnHsproofNote.setEnabled(exportType == ExportExternal.EXPORT_HSPROOF);		btnHsproofState.setEnabled(exportType == ExportExternal.EXPORT_HSPROOF);				if (exportType == ExportExternal.EXPORT_TMX				&& i == 2) {			btnNotrans.setSelection(false);		}	}	@Override	protected void okPressed() {				if (btnOnlySpecial.getSelection()) {			if (!btnHasNote.getSelection() && !btnNeedReview.getSelection()) {				MessageDialog.openError(getShell(), Messages.getString("all.dialog.error"), Messages.getString("ExportDocxDialog.error.null"));				return;			}		} else if (btnFilterWhenState.getSelection()) {			if (!btnNotrans.getSelection() && !btnNewtrans.getSelection()					&& !btnTransed.getSelection() && !btnApproved.getSelection()) {				MessageDialog.openError(getShell(), Messages.getString("all.dialog.error"), Messages.getString("ExportDocxDialog.error.null"));				return;			}		}				config.setExportType(ExportExternal.getExportTypeCode(cmb.getSelectionIndex()));		config.setHsProofState(btnHsproofState.getSelection());		config.setHsProofNote(btnHsproofNote.getSelection());		config.setFilterAllTrans(btnAllTrans.getSelection());		config.setFilterSpecial(btnOnlySpecial.getSelection());		config.setFilterHasState(btnFilterWhenState.getSelection());		config.setNotLocked(btnExceptLocked.getSelection());		config.setNotFullMatch(btnExceptFullMatch.getSelection());		config.setNotContextMatch(btnExceptContextMatch.getSelection());		config.setWithNote(btnHasNote.getSelection());		config.setWithNeedReview(btnNeedReview.getSelection());		config.setNoTrans(btnNotrans.getSelection());		config.setNewTrans(btnNewtrans.getSelection());		config.setTransed(btnTransed.getSelection());		config.setApprove(btnApproved.getSelection());		config.setSaveas(txtSaveas.getText());				// 记住状态		dialogSetting.put("ExportUnclean.useLast", true);		dialogSetting.put("cmb", cmb.getSelectionIndex());		dialogSetting.put("btnTransState", btnHsproofState.getSelection());		dialogSetting.put("btnTransNote", btnHsproofNote.getSelection());		dialogSetting.put("btnAllTrans", btnAllTrans.getSelection());		dialogSetting.put("btnOnlySpecial", btnOnlySpecial.getSelection());		dialogSetting.put("btnOnlyState", btnFilterWhenState.getSelection());		dialogSetting.put("btnNotLocked", btnExceptLocked.getSelection());		dialogSetting.put("btnNotFullMatch", btnExceptFullMatch.getSelection());		dialogSetting.put("btnNotContextMatch", btnExceptContextMatch.getSelection());		dialogSetting.put("btnHasNote", btnHasNote.getSelection());		dialogSetting.put("btnNeedReview", btnNeedReview.getSelection());		dialogSetting.put("btnNoTrans", btnNotrans.getSelection());		dialogSetting.put("btnNew", btnNewtrans.getSelection());		dialogSetting.put("btnHasTransed", btnTransed.getSelection());		dialogSetting.put("btnHasConfirm", btnApproved.getSelection());								super.okPressed();	}	class TableViewLabelProvider extends LabelProvider implements ITableLabelProvider {		@Override		public Image getColumnImage(Object element, int columnIndex) {			return null;		}		@Override		public String getColumnText(Object element, int columnIndex) {			XliffBean bean = (XliffBean) element;			switch (columnIndex) {			case 0:				return String.valueOf(xlfBeans.indexOf(bean) + 1);			case 1:				return proPath.get(xlfBeans.indexOf(bean));			case 2:				return bean.getSourceLanguage();			case 3:				return bean.getTargetLanguage();			}			return null;		}	}}