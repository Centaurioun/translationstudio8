package net.heartsome.cat.ts.ui.docx.dialog;import java.io.File;import java.text.MessageFormat;import java.util.ArrayList;import net.heartsome.cat.common.core.Constant;import net.heartsome.cat.common.resources.ResourceUtils;import net.heartsome.cat.common.ui.dialog.FileFolderSelectionDialog;import net.heartsome.cat.common.util.CommonFunction;import net.heartsome.cat.ts.ui.dialog.HelpDialog;import net.heartsome.cat.ts.ui.docx.Activator;import net.heartsome.cat.ts.ui.docx.common.DocxConstant;import net.heartsome.cat.ts.ui.docx.resource.Messages;import net.heartsome.cat.ts.ui.external.ExportExternal;import net.heartsome.cat.ts.ui.external.ImportConfig;import net.heartsome.cat.ts.ui.xliffeditor.nattable.editor.XLIFFEditorImplWithNatTable;import org.eclipse.core.filesystem.EFS;import org.eclipse.core.internal.filesystem.local.LocalFile;import org.eclipse.core.resources.IFile;import org.eclipse.core.resources.IProject;import org.eclipse.core.resources.IResource;import org.eclipse.core.resources.IWorkspaceRoot;import org.eclipse.core.resources.ResourcesPlugin;import org.eclipse.core.runtime.CoreException;import org.eclipse.core.runtime.Path;import org.eclipse.jface.dialogs.IDialogConstants;import org.eclipse.jface.dialogs.IDialogSettings;import org.eclipse.jface.dialogs.MessageDialog;import org.eclipse.jface.layout.GridDataFactory;import org.eclipse.jface.viewers.Viewer;import org.eclipse.jface.viewers.ViewerFilter;import org.eclipse.jface.window.Window;import org.eclipse.swt.SWT;import org.eclipse.swt.events.SelectionAdapter;import org.eclipse.swt.events.SelectionEvent;import org.eclipse.swt.layout.GridData;import org.eclipse.swt.layout.GridLayout;import org.eclipse.swt.widgets.Button;import org.eclipse.swt.widgets.Composite;import org.eclipse.swt.widgets.Control;import org.eclipse.swt.widgets.FileDialog;import org.eclipse.swt.widgets.Group;import org.eclipse.swt.widgets.Label;import org.eclipse.swt.widgets.Shell;import org.eclipse.swt.widgets.Text;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import com.ximpleware.AutoPilot;import com.ximpleware.VTDGen;import com.ximpleware.VTDNav;import com.ximpleware.XPathParseException;public class ImportExternalDialog extends HelpDialog {	private static final Logger LOGGER = LoggerFactory.getLogger(ImportExternalDialog.class);	/** 用户工作空间根目录 */	private IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();	/** 项目集合，值为项目的路径 */	private ArrayList<String> lstProject = new ArrayList<String>();	/** xliff 文件路径文本框 */	private Text xliffPathTxt;	/** xliff 文件浏览按钮 */	private Button browseXLIFFBtn;	/** RTF 文件路径文本框 */	private Text docxPathTxt;	/** RTF 文件浏览按钮 */	private Button browseDocxBtn;	/** 所选 xliff 文件的完整路径 */	private String xliffFullPath;	/** 所选 xliff 文件的相对路径 */	private String xliffRelativePath;	private ImportConfig config;	private Label txtImportType;	private IDialogSettings dialogSetting;	@SuppressWarnings("deprecation")	public ImportExternalDialog(Shell shell, XLIFFEditorImplWithNatTable xliffEditor, ImportConfig config) {		super(shell);		this.xliffRelativePath = config.get_xliff();		this.xliffFullPath = config.getXliffFile();		this.config = config;		for (IProject project : root.getProjects()) {			lstProject.add(project.getLocation().toOSString());		}		dialogSetting = Activator.getDefault().getDialogSettings();		setShellStyle(getShellStyle() | SWT.RESIZE);	}	@Override	protected void createButtonsForButtonBar(Composite parent) {		// ROBERTHELP 导入RTF		String language = CommonFunction.getSystemLanguage();		String helpUrl = MessageFormat.format(				"/net.heartsome.cat.ts.ui.help/html/{0}/ch05s05.html#import-rtf-to-xliff", language);		setHelpUrl(helpUrl);		super.createButtonsForButtonBar(parent);		getButton(IDialogConstants.OK_ID).setEnabled(false);	}	@Override	protected void configureShell(Shell newShell) {		super.configureShell(newShell);		newShell.setText(Messages.getString("ImportDocxDialog.title"));	}	@Override	protected Control createDialogArea(Composite parent) {		Composite composite = (Composite) super.createDialogArea(parent);		composite.setLayout(new GridLayout(1, false));		GridDataFactory.fillDefaults().hint(500, 180).grab(true, true).applyTo(composite);		Group groupXLIFF = new Group(composite, SWT.None);		groupXLIFF.setLayoutData(new GridData(GridData.FILL_BOTH));		groupXLIFF.setLayout(new GridLayout(3, false));		groupXLIFF.setText(Messages.getString("ImportDocxDialog.XLIFFgroup"));		Label lblXLIFF = new Label(groupXLIFF, SWT.None);		lblXLIFF.setText(Messages.getString("ImportDocxDialog.lable.xliff"));		xliffPathTxt = new Text(groupXLIFF, SWT.BORDER);		xliffPathTxt.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));		xliffPathTxt.setEditable(false);		if (xliffRelativePath != null) {			xliffPathTxt.setText(xliffRelativePath);		}		browseXLIFFBtn = new Button(groupXLIFF, SWT.None);		browseXLIFFBtn.setText(Messages.getString("ImportDocxDialog.browseXLIFFBtn"));		browseXLIFFBtn.addSelectionListener(new SelectionAdapter() {			public void widgetSelected(SelectionEvent event) {				FileFolderSelectionDialog dialog = new FileFolderSelectionDialog(getShell(), false, IResource.FILE) {					// 打开对话框时展开树形目录					public void create() {						super.create();						super.getTreeViewer().expandAll();					}				};				dialog.setTitle(Messages.getString("ImportDocxDialog.browseXLIFFBtn.msg0"));				dialog.setMessage(Messages.getString("ImportDocxDialog.browseXLIFFBtn.msg1"));				dialog.setDoubleClickSelects(true);				dialog.setAllowMultiple(false);				try {					dialog.setInput(EFS.getStore(root.getLocationURI()));				} catch (CoreException e1) {					LOGGER.error(Messages.getString("ImportDocxDialog.LOGGER.logger1"), e1);				}				dialog.addFilter(new ViewerFilter() {					@SuppressWarnings("restriction")					@Override					public boolean select(Viewer viewer, Object parentElement, Object element) {						if (element instanceof LocalFile) {							LocalFile folder = (LocalFile) element;							if (folder.getName().equalsIgnoreCase(".hsConfig")									|| folder.getName().equalsIgnoreCase(".metadata")) {								return false;							}							if (lstProject.contains(folder.toString())) {								return true;							}							String xliffFolderPath = folder.toString();							for (String projectPath : lstProject) {								String path1 = projectPath + System.getProperty("file.separator")										+ Constant.FOLDER_XLIFF;								if (xliffFolderPath.startsWith(path1)) {									return true;								}							}						}						return false;					}				});				dialog.create();				if (Window.OK == dialog.open()) {					if (dialog.getResult() != null) {						Object obj = dialog.getFirstResult();						IFile file = root.getFileForLocation(Path.fromOSString(obj.toString()));						xliffPathTxt.setText(file.getFullPath().toOSString());						xliffFullPath = ResourceUtils.iFileToOSPath(file);					}					getButton(IDialogConstants.OK_ID).setEnabled(!docxPathTxt.getText().isEmpty());				}			}		});		Group groupExternal = new Group(composite, SWT.NONE);		groupExternal.setText(Messages.getString("ImportDocxDialog.label.docx.title"));		groupExternal.setLayout(new GridLayout(3, false));		groupExternal.setLayoutData(new GridData(GridData.FILL_BOTH));		Label lblRTF = new Label(groupExternal, SWT.None);		lblRTF.setText(Messages.getString("ImportDocxDialog.label.docx"));		GridDataFactory.swtDefaults().align(SWT.RIGHT, SWT.CENTER).grab(false, false).applyTo(lblRTF);		docxPathTxt = new Text(groupExternal, SWT.BORDER);		docxPathTxt.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));		docxPathTxt.setEditable(false);		browseDocxBtn = new Button(groupExternal, SWT.None);		browseDocxBtn.setText(Messages.getString("ImportDocxDialog.browseDocxBtn"));		browseDocxBtn.addSelectionListener(new SelectionAdapter() {			public void widgetSelected(SelectionEvent e) {				FileDialog dialog = new FileDialog(getShell());				dialog.setText(Messages.getString("ImportDocxDialog.browseDocx.title"));				dialog.setFilterExtensions(new String[] { "*.docx;"//						+ "*.sdlxliff"						,						"*.*" });				dialog.setFilterPath(dialogSetting.get("defaultPath"));				String path = dialog.open();				if (path != null) {					if (testFileType(path)) {						dialogSetting.put("defaultPath", path.substring(0, path.lastIndexOf(File.separator)));						docxPathTxt.setText(path);						getButton(IDialogConstants.OK_ID).setEnabled(true && (!xliffPathTxt.getText().isEmpty()));					} else {						getButton(IDialogConstants.OK_ID).setEnabled(false);					}				}			}		});		txtImportType = new Label(composite, SWT.READ_ONLY);		GridDataFactory.swtDefaults().align(SWT.FILL, SWT.BOTTOM).span(1, 3).grab(true, true).applyTo(txtImportType);		return composite;	}	@SuppressWarnings("deprecation")	@Override	protected void okPressed() {		config.setXliffFile(xliffFullPath);		config.set_xliff(xliffRelativePath);		config.setExternalFile(docxPathTxt.getText());		super.okPressed();	}	private boolean testFileType(String path) {		int type = 0;		type = testUncelan(path);		if (type == -2) {			return false;		}		if (type == -1) {			type = testHsproof(path);			if (type == -2) {				return false;			}		}				if (type == -1) {			MessageDialog.openError(getShell(), Messages.getString("all.dialog.error"),					MessageFormat.format(Messages.getString("ImportDocxDialog.label.external.error"), path));			docxPathTxt.setText("");			txtImportType.setText("");			getButton(IDialogConstants.OK_ID).setEnabled(false);			return false;		} else {			if (type == ExportExternal.EXPORT_HSPROOF) {				txtImportType.setText(Messages.getString("ExportDocxDialog.lable.exporttype.hsproof"));			} else if (type == ExportExternal.EXPORT_SDLXLIFF) {				txtImportType.setText(Messages.getString("ExportDocxDialog.lable.exporttype.sdlxliff"));			} else if (type == ExportExternal.EXPORT_SDLUNCLEAN) {				txtImportType.setText(Messages.getString("ExportDocxDialog.lable.exporttype.unclean"));			}			config.setImportType(type);			getButton(IDialogConstants.OK_ID).setEnabled(true);			return true;		}	}	private int testUncelan(String path) {		VTDGen vg = new VTDGen();		if (!vg.parseZIPFile(path, "word/styles.xml", true)) {			alertParseError(path);			return -2;		}		VTDNav vn = vg.getNav();		AutoPilot ap = new AutoPilot(vn);		ap.declareXPathNameSpace("w", ExportExternal.NAMESPACE_W);		try {			ap.selectXPath("/w:styles/w:style[@w:styleId=\"tw4winMark\"]");		} catch (XPathParseException e) {			LOGGER.error("", e);			return -2;		}		return ap.evalXPathToBoolean() ? ExportExternal.EXPORT_SDLUNCLEAN : -1;	}	private int testHsproof(String path) {		StringBuilder builder = new StringBuilder();		// hs proof		VTDGen vg = new VTDGen();		if (!vg.parseZIPFile(path, "word/document.xml", true)) {			alertParseError(path);			return -2;		}		VTDNav vn = vg.getNav();		AutoPilot ap = new AutoPilot(vn);		AutoPilot _ap = new AutoPilot(vn);		ap.declareXPathNameSpace("w", ExportExternal.NAMESPACE_W);		_ap.declareXPathNameSpace("w", ExportExternal.NAMESPACE_W);		try {			ap.selectXPath("count(/w:document/w:body/w:tbl/w:tr[1]/w:tc)");			if (!ap.evalXPathToBoolean()) {				return -1;			}			ap.selectXPath("/w:document/w:body/descendant::w:r");			boolean inBegin = false;			while (ap.evalXPath() != -1) {				if (inBegin) {					vn.push();					_ap.selectXPath("./w:instrText/text()");					while (_ap.evalXPath() != -1) {						builder.append(vn.toString(vn.getCurrentIndex()));					}					vn.pop();					_ap.selectXPath("./w:fldChar[@w:fldCharType='end']");					if (_ap.evalXPathToBoolean()) {						if (builder.toString().trim().contains(DocxConstant.HSDOCX_FLAG)) {							return ExportExternal.EXPORT_HSPROOF;						} else {							builder.setLength(0);						}					}				} else {					_ap.selectXPath("./w:fldChar[@w:fldCharType='begin']");					inBegin = _ap.evalXPathToBoolean();					if (inBegin) {						vn.push();						_ap.selectXPath("./w:instrText/text()");						while (_ap.evalXPath() != -1) {							builder.append(vn.toString(vn.getCurrentIndex()));						}						vn.pop();					}				}			}		} catch (Exception e) {			LOGGER.error("", e);			return -2;		}		return -1;	}	private void alertParseError(String path) {		MessageDialog.openError(getShell(), Messages.getString("all.dialog.error"),				MessageFormat.format(Messages.getString("ImportDocxDialog.ok.parseError"), path));		txtImportType.setText("");		docxPathTxt.setText("");		getButton(IDialogConstants.OK_ID).setEnabled(false);	}}