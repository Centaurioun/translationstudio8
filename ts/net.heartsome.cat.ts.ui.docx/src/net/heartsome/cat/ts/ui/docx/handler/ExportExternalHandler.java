package net.heartsome.cat.ts.ui.docx.handler;import java.io.IOException;import java.lang.reflect.InvocationTargetException;import net.heartsome.cat.ts.ui.docx.dialog.ExportExternalDialog;import net.heartsome.cat.ts.ui.external.ExportExternal;import org.eclipse.core.commands.ExecutionEvent;import org.eclipse.core.commands.ExecutionException;import org.eclipse.core.runtime.IProgressMonitor;import org.eclipse.jface.dialogs.Dialog;import org.eclipse.jface.dialogs.ProgressMonitorDialog;import org.eclipse.jface.operation.IRunnableWithProgress;import org.eclipse.swt.widgets.Shell;import org.eclipse.ui.handlers.HandlerUtil;import org.slf4j.LoggerFactory;/** * 导出外部文件 * @author Austen	2013-10-11 */public class ExportExternalHandler extends AbstractExportHandler{	@Override	public Object execute(ExecutionEvent event) throws ExecutionException {		Shell shell = HandlerUtil.getActiveShell(event);		if (! initExportConfig(event)) {			return null;		}		config.setShell(shell);		ExportExternalDialog dialog = new ExportExternalDialog(config);		if (Dialog.OK == dialog.open()) {			if (config.getExportType() == ExportExternal.EXPORT_HSPROOF) {				try {					config.doExport();				} catch (IOException e) {					// TODO Auto-generated catch block					e.printStackTrace();				}			} else {				ProgressMonitorDialog progressDialog = new ProgressMonitorDialog(shell);				try {					progressDialog.run(true, true, new IRunnableWithProgress() {						@Override						public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {							config.setMonitor(monitor);							try {								config.doExport();							} catch (IOException e) {								// TODO Auto-generated catch block								e.printStackTrace();							}						}					});				} catch (InvocationTargetException e) {					e.printStackTrace();				} catch (InterruptedException e) {					e.printStackTrace();				}			}		}		return null;	}}